import { Component, OnInit, ChangeDetectorRef } from '@angular/core';
import { Http , Headers, Response,RequestOptions } from '@angular/http';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { Router } from '@angular/router';
import { AppComponent } from '../../app.component';
import {CommonService} from '../../services/common.service';
import { MessagePropertiesService } from '../../services/message-properties.service';

declare var $: any; 
declare var jQuery: any;
declare var swal: any;


@Component({
  selector: 'app-invoice-details',
  templateUrl: './invoice-details.component.html',
  styleUrls: ['./invoice-details.component.css']
})
export class InvoiceDetailsComponent implements OnInit {
    checked:boolean=false;
indeterminate:boolean=false;
  constructor(private http: Http, private formBuilder: FormBuilder,
          private router: Router,private ref: ChangeDetectorRef,private app:AppComponent, private messagesService:MessagePropertiesService,
          private commonService:CommonService) {
      this.app.isActive=true;
      this.checked=false;
      this.indeterminate=false;
  }

  ngOnInit() {
      $("#invoice-order-table").DataTable({
          // bSort:false,
         //  bPaginate:false,
           "order": [0],
           "language": {
               "emptyTable": "No data available",
               "info": "Showing page _PAGE_ of _PAGES_",
               "infoFiltered": "(filtered from _MAX_ total records)"
             },
          //  "bInfo":false,
          //  "bFilter":false,
            "fnDrawCallback": function( oSettings ) {
                         if ( 10 >= oSettings.fnRecordsDisplay() ) {
                             $( oSettings.nTableWrapper ).find( '.dataTables_paginate' ).hide();
                              
                             $( oSettings.nTableWrapper ).find( '.dataTables_info' ).hide();
                         } else {
                             $( oSettings.nTableWrapper ).find( '.dataTables_paginate' ).show();
                               $(oSettings.nTableWrapper).find('.dataTables_filter').show();
                             $( oSettings.nTableWrapper ).find( '.dataTables_info' ).show();
                               $(oSettings.nTableWrapper).find('.dataTables_length').show();
                         }
                     },
            "columnDefs": [ {
                 "targets"  : 'no-sort',
                 "orderable": false,
                } ]
            
       });
       setTimeout(() =>{
           $(".dataTables_scrollHeadInner").css({"width":"100%"});
           $(".table ").css({"width":"100%"});
           $("#invoice-order-table_filter").append("<i class='fa fa-search searchStock' id='searchStock'></i>");
           },1100);
       setTimeout(()=>{
           var width=$("#mainContent").css("width");
           $(".outbound-footer").css("width",width);
       },50);

  }
  createInvoiceOrder(type){
      
      this.commonService.saleType='Create';
       this.commonService.showOrderType=false;
       const path:any="invoicedetails/createInvoice";
       this.router.navigate([path]);
  }
  editInvoiceOrder(type){
      let flag:boolean=this.commonService.continueAction(type);
  if(flag){
      this.commonService.responseMessages("","Please select atleast one sales order", "warning");
      return false
  }
      this.commonService.saleType='Edit';
      this.commonService.showOrderType=true;
      const path:any="invoicedetails/createInvoice";
      this.router.navigate([path]);
  }
  editInvoiceOrderById(){
      this.commonService.saleType='Edit';
      const path:any="invoicedetails/createInvoice";
      this.router.navigate([path]);
  }
  selectAll(event,checkAll,tableId){
      setTimeout(()=>{
          this.commonService.selectAllCheckBoxes(checkAll,tableId)
      },300);
  }
  getReportList(event,tableId){
      setTimeout(()=>{let flag:boolean=this.commonService.checkAction(tableId);
      if(flag){
          this.indeterminate=false;
          this.checked=true;
      }else{
          this.indeterminate=true;
      }
      },400);
      
  }
  printSelectedReports(type){
      let flag:boolean=this.commonService.continueAction(type);
      if(flag){
          this.commonService.responseMessages("","Please select atleast one sales order", "warning");
          return false
      }
  }
}
