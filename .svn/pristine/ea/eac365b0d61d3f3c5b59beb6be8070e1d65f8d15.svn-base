import { Component, OnInit, ChangeDetectorRef } from '@angular/core';
import { Http , Headers, Response,RequestOptions } from '@angular/http';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { Router } from '@angular/router';
import { EnvConfigurationService } from '../../services/env-configuration.service';
import { CommonService } from '../../services/common.service';

declare var $: any;
declare var jQuery: any;
declare var swal: any;

import { AppComponent } from '../../app.component';

@Component({
  selector: 'app-user-management',
  templateUrl: './user-management.component.html',
  styleUrls: ['./user-management.component.css']
})
export class UserManagementComponent implements OnInit {

    opendiv:boolean;
    public orgUsers: any;
    public userRole:string;
     public addUserForm: FormGroup;
    public isAddUser:boolean;
    public orgRoles=[];
    public isBranchUser=false;
    public url:string;
    public reqmethod:string;
    public payload:any;
    public bpId:string;
    public alreadyExisted:string;
    public assignBpartner:string;
    
    public addUserToBpartner:any;
    public moduleName:string;
    public reqMethod:string;
    public disableUserInput:boolean;
    public roleAdmin:boolean;
    
    // user details
    public orgId:string;
    private bPartners:any;
    public  bPartnersDet:any;
    public rmsMsg:any;
    public exitedUSerDetails:any;
    public bpIdLegalName:string;
    public bpartnerArray:any;
     
  constructor(private http: Http, private formBuilder: FormBuilder,private environment:EnvConfigurationService,private commonService:CommonService,
			 private router: Router,private ref: ChangeDetectorRef,private app:AppComponent) {
    this.app.isActive=true;
      this.opendiv= false;
     this.bpId= localStorage.getItem("bpId");
      this.disableUserInput = false;
      this.roleAdmin=false;
      this.addUserForm = new FormBuilder().group(
            {

                'email': ['', [Validators.required, Validators.pattern( '^[_A-Za-z0-9-\\+]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9-]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$' )]],
                'firstName': ['', Validators.required],
                'lastName': ['', Validators.required],
                'mobile': ['', [Validators.required, Validators.pattern( '^[789]{1}[0-9]{9}$' )]],
                'roleId': ['', Validators.required],
                'logonId': [''],
                'role': [''],
                'userId': [''],
                'bpId': ['',Validators.required],
                'bpLegalName': [''],
                'userType': [''],
                'bpType':[''],
                'userTypeId':['']
            }
        );
      this.bpIdLegalName='';
      
  }

  ngOnInit() { 
  
      this.isAddUser=true;
      this.orgId = localStorage.getItem("orgId");
      if(localStorage.getItem("roleName") == "Admin"){
         this.roleAdmin =true;
      }else{
          this.addUserForm.value['bpId']=localStorage.getItem("bpId");
          console.log(this.addUserForm.value)
      }
      
      this.getUser();
      this.getUserRole();
      this.getBusinessPartnerDet();
  }
    
    validateBussiness(){
        let selectVal=this.addUserForm.value['roleId'];
        let businessPartnerArray=[];
        if(selectVal ==6){
           
            this.url = this.environment.getRequiredApi( 'get_org_bp' ).replace("{org_id}",localStorage.getItem("orgId"))+"?";
         this.commonService.getData( this.url, "GET", '' ,localStorage.getItem( 'Manage Customers' ))
            .subscribe(( response ) => {
                console.log(response);
                 this.bPartners = response.data.bps;
                  for (let index in this.bPartners) {
                       if(this.bPartners[index].bpType == "RMS"){
                           businessPartnerArray = this.bPartners;
                       } 
                     }
                this.bPartners = businessPartnerArray;
                    if(this.bPartners.length == 0){
                        this.rmsMsg = "You cannot Admin other than RMS type.Please select other Role";
                            // this.commonService.responseMessages("","You cannot Admin other than RMS type.Please select other Role ", "warning");  
                        this.bPartners = [];
                         setTimeout(() => {
                        this.rmsMsg = "";
                    }, 3000);
                        
                    }
                
                
            } );
            
        }else{
            this.getBusinessPartnerDet();
        }
    }
    
    
    
     applyDataTable(){
         
     
          setTimeout(()=>{  
          $("#userListTable").DataTable({
           "language": {
              "emptyTable": "No data available",
              "info": "Showing page _PAGE_ of _PAGES_",
              "infoFiltered": "(filtered from _MAX_ total records)"
            },
           "fnDrawCallback": function( oSettings ) {
                        if ( 5 >= oSettings.fnRecordsDisplay() ) {
                            $( oSettings.nTableWrapper ).find( '.dataTables_paginate' ).hide();
                            
                            $( oSettings.nTableWrapper ).find( '.dataTables_info' ).hide();
                            
                           
                        } else {
                            $( oSettings.nTableWrapper ).find( '.dataTables_paginate' ).show();
                            $(oSettings.nTableWrapper).find('.dataTables_filter').show();
                            $( oSettings.nTableWrapper ).find( '.dataTables_info' ).show();
                            $(oSettings.nTableWrapper).find('.dataTables_length').show();
                          
                        }
                    },
           "columnDefs": [ {

                    "targets": [5], 

                    "orderable": false,  

                }],
          
      });
         },400);  
     
  }
    openModal(){
        $( '#addUser' ).modal( 'show' );
        this.moduleName ="newUser";
         this.addUserForm.reset();
         this.disableUserInput = false;
        this.isAddUser=true;
    }
    
    resetPassword(userId,logonId){
        let resetPayload = {
             "action": "RESETPWD",
             "logonId": logonId,
             "userIds": [ userId                  
                         ]
                }
        
         this.url = this.environment.getRequiredApi( 'fwd_password' )+"?";
         this.commonService.getData( this.url, "POST", resetPayload ,localStorage.getItem( 'Manage Customers' ))
            .subscribe(( response ) => {
                console.log(response);
                 this.commonService.responseMessages("",response.message, "success");
            } );
    }
    
    edituserDetails(obj,modName){
    this.moduleName ="editUser";
       this.payload=obj;
        console.log(obj.bpId);
         this.disableUserInput = true;
       
        this.addUserForm.setValue( obj );
         this.bpartnerArray=[];
        this.bpartnerArray["bpId"]=obj.bpId;
        this.bpartnerArray["bpLegalName"]=obj.bpLegalName;
       
        this.bpIdLegalName = this.addUserForm.value.bpId
        this.opendiv = true;
        this.isAddUser=false;
    }
    deleteUser(userId,bpId){
        let userArray=[];
        userArray.push(userId);
      /*  let deletePayload:any={};
        deletePayload["userId"]=userArray;*/
        console.log(userArray);
        
         this.url = this.environment.getRequiredApi( 'delete_user' ).replace("{bp_id}",bpId)+"?";
         this.commonService.getData( this.url, "DELETE", userArray ,localStorage.getItem( 'Manage Customers' ))
            .subscribe(( response ) => {
                console.log(response);
                 this.commonService.responseMessages("",response.message, "success");
                $("#userListTable").DataTable().destroy();
                this.getUser();
            } );
        
        
    }
    
    submituserDetails(){
     $('#loadingIcon').show();
     $("#black-overlay").show();
       
        this.reqMethod="POST";
        if(this.moduleName == "newUser"){
        this.addUserForm.value.logonId=this.addUserForm.value.email;
        this.payload = this.addUserForm.value;
        this.payload["bpType"]= localStorage.getItem("bpType");
           // this.payload["bpId"]=  this.bpId;
        /* for (let key in this.payload) {
            if(this.payload[key].length == 0){
                 this.payload[key] = null;
            }
            
            
        }*/
            
        }
        if(this.moduleName == "editUser"){
                 this.payload = this.addUserForm.value;
            this.payload.bpId =this.bpartnerArray["bpId"];
                 this.reqMethod="PUT";
            console.log( this.bpId);
            console.log( this.payload);
            }
        if(this.moduleName == "assigedUser"){
           this.exitedUSerDetails.roleId = this.addUserForm.value.roleId;
           this.exitedUSerDetails.bpId = this.addUserForm.value.bpId;
           this.exitedUSerDetails.email =  this.addUserForm.value.email;
           this.exitedUSerDetails.firstName =  this.addUserForm.value.firstName;
           this.exitedUSerDetails.lastName =  this.addUserForm.value.lastName;
           this.exitedUSerDetails.mobile =  this.addUserForm.value.mobile;
           this.payload= this.exitedUSerDetails;    
        }
       
        console.log( this.payload);
       this.url = this.environment.getRequiredApi( 'add_user_bp' )+"?org_id="+ this.orgId +"&";
         this.commonService.getData( this.url, this.reqMethod, this.payload ,localStorage.getItem( 'Manage Customers' ))
            .subscribe(( response ) => {
                console.log(response);
                 this.commonService.responseMessages("",response.message, "success");
                 $('#loadingIcon').hide();
                 $("#black-overlay").hide();
                 $("#userListTable").DataTable().destroy();
                this.getUser();
                this.reset();
            } );
        
      
        
    }
    
    finduserStatus(email){
        console.log(email);
        
         this.url = this.environment.getRequiredApi( 'check_user_status' )+ "?logon_id="+email+"&bp_id="+ this.bpId+"&";
         this.commonService.getData( this.url, "GET", '',localStorage.getItem( 'Manage Customers' ))
            .subscribe(( response ) => {
                console.log(response);
                if(response.data.assigned && response.data.existed && response.data.status=="Active"){
                    this.isBranchUser=true;
                    this.alreadyExisted="User is already assigned for same Business Partner";
                    this.reset();
                   /*  $( "#popover-next" ).show();
                    this.isBranchUser=false;*/
                   this.commonService.responseMessages("",   this.alreadyExisted, "warning"); 
                   return false;
                }
                
                if(response.data.assigned && response.data.existed && response.data.status !="Active"){
                    this.reset();
                    this.commonService.responseMessages("","User is Inactive.Please contact Administrator", "success");
                    return false;
                }
                
                if(response.data.existed && !response.data.assigned && response.data.status =="Active"){
                   
                    //get user details
                     
                    let userUrl:any=this.environment.getRequiredApi("get_user_details")+"?logon_id="+email+"&";
                     this.commonService.getData( userUrl, "GET", '',localStorage.getItem( 'Manage Customers' ))
                       .subscribe(( result ) => {
                            $( "#popover-next" ).show();
                           this.isBranchUser=false;
                           this.assignBpartner="User already existed.You can add to this Business Partner";
                           this.addUserToBpartner = result.data;
                       console.log(this.addUserToBpartner)
                       });
                    
                   // this.opendiv = true;
                }
                
                
                if(! response.data.existed && !response.data.assigned ){
                    this.opendiv = true;
                 }
                
            } );
     
       
    }
    reset(){
         $( '#addUser' ).modal( 'hide' );
        this.opendiv = false;
        this.addUserForm.reset();
    }
    
   
     public getUser() {
        /*var bpId = $( '#business_place_add' ).val();
        var bpLegalName = $( "#business_place_add option:selected" ).text();*/
     $('#loadingIcon').show();
     $("#black-overlay").show();
        
        this.url = this.environment.getRequiredApi( 'um_get_user_details' ).replace( '{org_id}', this.orgId  ) + "?action=ORG&";//'http://104.237.3.222:9090/igasp-core/user/'+ this.userId;
        this.reqmethod = 'GET';
         // 
        this.commonService.getData( this.url, this.reqmethod, '',localStorage.getItem( 'Manage Customers' ))
            .subscribe(( response ) => {
               
                this.orgUsers = response.data.users;
                 this.applyDataTable();
              $('#loadingIcon').hide();
              $("#black-overlay").hide();
              
            //    this.edituserDetails( this.result,'adduser');
            }, err => {
                  $('#loadingIcon').hide();
              $("#black-overlay").hide();
                    console.log(err)   
                
               
                //this.reqdata.responseMessages(err, err.status, 'danger');
            } );
            
        $( "#popover-next" ).hide();
    }

    public getUserRole(){
       
         this.url = this.environment.getRequiredApi( 'dropdown_list').replace("{obj_name}","orgRoles")+"/"+localStorage.getItem("orgId")+"?";
      //     this.url = this.environment.getRequiredApi( 'dropdown_list').replace("{obj_name}",localStorage.getItem("orgId"))+"?";
        this.reqmethod = 'GET';
        
        this.commonService.getData( this.url, this.reqmethod, '', "")
            .subscribe(( response ) => {
                console.log(response);
                this.orgRoles =response.data.objs; 
               
            } );
    }
    
    cancelPopup(id){
         $( "#" + id ).hide();
        $( "#addUser" ).modal( 'hide' );
    }
    
    public existedUserToOtherBpartner(data){
        $("#popover-next").hide();
        this.opendiv = true;
       this.moduleName ="assigedUser";
        console.log(data);
        data.roleId=this.addUserForm.value.roleId;
        data.role=this.addUserForm.value.role;
         data.bpId=this.addUserForm.value.bpId;
        data.bpLegalName = null;
        data.bpType = localStorage.getItem("bpType");
        this.addUserForm.setValue( data );
       
        this.exitedUSerDetails =data;
        
        // this.payload = this.addUserForm.value;
         
        /*this.exitedUSerDetails.userId=data.userId;
        this.exitedUSerDetails.userType =data.userType;
        this.exitedUSerDetails.userTypeId =data.userTypeId;*/
      
         console.log( this.exitedUSerDetails);
        
         
    }
    
    getBusinessPartnerDet(){
       
        
        this.url = this.environment.getRequiredApi( 'get_org_bp' ).replace("{org_id}",localStorage.getItem("orgId"))+"?";
         this.commonService.getData( this.url, "GET", '' ,localStorage.getItem( 'Manage Customers' ))
            .subscribe(( response ) => {
                console.log(response);
                 this.bPartners = response.data.bps;
                
            } );
    }
}
