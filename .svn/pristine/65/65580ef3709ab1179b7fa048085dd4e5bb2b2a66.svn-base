import { Component, OnInit, Input, Output, EventEmitter, ChangeDetectorRef} from '@angular/core';
import { Http, Headers, Response, RequestOptions } from '@angular/http';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { Router } from '@angular/router';
import { AppComponent } from '../../app.component';
import {CommonService} from '../../services/common.service';
import { DateAdapter } from '@angular/material';
import { MessagePropertiesService } from '../../services/message-properties.service';
import { ExcelService } from '../../services/excel.service';
import {EnvConfigurationService} from '../../services/env-configuration.service';
declare var $: any;
declare var jQuery: any;
declare var swal: any;

@Component({
    selector: 'app-purchase-order-details',
    templateUrl: './purchase-order-details.component.html',
    styleUrls: ['./purchase-order-details.component.css']
})
export class PurchaseOrderDetailsComponent implements OnInit {

    createPurchaseOrderForm: FormGroup;
    createSalesOrderPage: boolean = false;
    salesOrderDetails: boolean = false;
    saleType: any;
    checked: boolean = false;
    indeterminate: boolean = false;
    purchaseOrderMessages: any
    bpId: any;
    orgId: any;
    accessObjectId: any;

    purchaseOrderDetailsList: any;
    purchaseOrderDetailslength: any;
    purchaseListPayload: any;
    dataTableRowsCount: any;
    orderTypes: any;
    vendorNames: any;
    checkboxLength: any;
    salesDocArray: any;
    constructor(private http: Http, private formBuilder: FormBuilder,
        private router: Router, private ref: ChangeDetectorRef, private app: AppComponent, private messagesService: MessagePropertiesService,
        private commonService: CommonService, private environment: EnvConfigurationService, private excelService: ExcelService) {
        this.app.isActive = true;
        this.salesOrderDetails = true;
        this.createPurchaseOrderForm = formBuilder.group({
            hideRequired: false,
            floatLabel: 'auto',
            'vendorName': ['', Validators.required],
            'docType': ['', Validators.required],
        });
        this.checked = false;
        this.indeterminate = false;
        this.purchaseOrderMessages = messagesService.purchase_order_details_msg;
        this.bpId = localStorage.getItem("bpId");
        this.orgId = localStorage.getItem("orgId");
        this.accessObjectId = localStorage.getItem("Purchase Order");
        this.purchaseListPayload = {};
        this.purchaseOrderDetailsList = [];
        this.purchaseOrderDetailslength = 0;
        this.orderTypes = [];
        this.vendorNames = [];
        this.checkboxLength = 0;
        this.salesDocArray = null;
    }



    ngOnInit() {
        this.salesDocArray = null;
        this.purchaseListPayload['bp_id'] = this.bpId;
        this.purchaseListPayload['vendor'] = null;
        this.purchaseListPayload['from_date'] = null;
        this.purchaseListPayload['org_id'] = this.orgId;
        this.purchaseListPayload['status'] = null;
        this.purchaseListPayload['to_date'] = null;
        this.getpurchaseOrderList();
        $("#purchase-order-table").DataTable({
            // bSort:false,
            //  bPaginate:false,
            "order": [0],
            "language": {
                "emptyTable": "No data available",
                "info": "Showing page _PAGE_ of _PAGES_",
                "infoFiltered": "(filtered from _MAX_ total records)"
            },
            //  "bInfo":false,
            //  "bFilter":false,
            "fnDrawCallback": function(oSettings) {
                if (10 >= oSettings.fnRecordsDisplay()) {
                    $(oSettings.nTableWrapper).find('.dataTables_paginate').hide();

                    $(oSettings.nTableWrapper).find('.dataTables_info').hide();
                } else {
                    $(oSettings.nTableWrapper).find('.dataTables_paginate').show();
                    $(oSettings.nTableWrapper).find('.dataTables_filter').show();
                    $(oSettings.nTableWrapper).find('.dataTables_info').show();
                    $(oSettings.nTableWrapper).find('.dataTables_length').show();
                }
            },
            "columnDefs": [{
                "targets": 'no-sort',
                "orderable": false,
            }]
        });
        setTimeout(() => {
            $(".dataTables_scrollHeadInner").css({ "width": "100%" });
            $(".table ").css({ "width": "100%" });
            $("#sales-order-table_filter").append("<i class='fa fa-search searchStock' id='searchStock'></i>");
        }, 1100);
        setTimeout(() => {
            var width = $("#mainContent").css("width");
            $(".outbound-footer").css("width", width);
        }, 50);
        let orderTypesUrl: any = this.environment.getRequiredApi("header_dropdown") + "?group=PURTYPS&";
        this.commonService.getData(orderTypesUrl, "GET", "", this.accessObjectId).subscribe(response => {
            if (response.status == 0) {
                this.orderTypes = response["data"].configValues;
            }
        });
    }
    createSalesOrder(type) {

        this.commonService.saleType = 'Create';
        this.commonService.showOrderType = false;
        $("#createPurchaseModal").modal("show");
    }
    closeModal(id) {
        $("#" + id).modal("hide");
        this.createPurchaseOrderForm.reset();
    }
    createPurchaseForm(id) {
        let orderType: any = $("#orderTypes").val();//ZNB
        if (this.vendorNames.length == 0 && orderType == "ZKS") {
            this.commonService.responseMessages("", "Please select valid vendor", "warning");
            return false;
        }
        $("#" + id).modal("hide");
        const path: any = "purchaseorder/savepurchaseorder";
        let vendorId: any = $("#modal-searchInput").val();
        this.router.navigate([path], { queryParams: { "orderType": orderType, "vendorId": vendorId, "action": "C", frompage: "PO" } });

    }
    editPurchaseOrder(type) {
        if (this.checkboxLength > 1 || this.checkboxLength == 0) {
            this.commonService.responseMessages("", "Please select atleast one purchase order", "warning");
            return false
        }
        else {
            if (this.checkboxLength == 1) {
                this.commonService.saleType = 'Edit';
                this.commonService.showOrderType = true;
                const path: any = "purchaseorder/savepurchaseorder";
                this.router.navigate([path]);
            }
        }
    }
    selectAll(event, checkAll, tableId) {
        setTimeout(() => {
            this.commonService.selectAllCheckBoxes(checkAll, tableId);
            if ($("#checkbox-all-input").is(":checked")) {
                this.checkboxLength = 100;
                this.purchaseOrderDetailsList.forEach(currenItem => {
                    if (this.salesDocArray == null || this.salesDocArray == "") {
                        this.salesDocArray = currenItem.po_number;
                    } else {
                        this.salesDocArray = this.salesDocArray + "," + currenItem.po_number;
                    }
                });
            } else {
                this.checkboxLength = 0;
                this.salesDocArray = null;
                this.salesDocArray = "";
            }
        }, 300);
    }
    getReportList(response, tableId, i) {
        //      this.shipToNum=response.ship_to_num;
        setTimeout(() => {
            let flag: boolean = this.commonService.checkAction(tableId);
            if (flag) {
                this.indeterminate = false;
                this.checked = true;
            } else {
                this.indeterminate = true;
            }
        }, 400);
        setTimeout(() => {
            if ($("#checkbox-" + i + "-input").is(":checked")) {
                //              this.printOrderNum=response.sales_doc;
                //              this.reqDelDate=response.req_del_date;
                if (response.hasOwnProperty('del_order')) {
                    //                  this.dlvrNum=response.del_order;
                }
                if (this.salesDocArray == null || this.salesDocArray == "") {
                    this.salesDocArray = response.po_number;
                } else {
                    this.salesDocArray = this.salesDocArray + "," + response.sales_doc;
                }
                this.checkboxLength++;
            } else {
                //              this.printOrderNum="";
                //              this.reqDelDate="";
                if (this.salesDocArray.includes(",")) {
                    this.salesDocArray = this.salesDocArray.replace(response.sales_doc, "");
                    this.salesDocArray = this.salesDocArray.replace(/^,|,$/g, '');
                } else {
                    this.salesDocArray = "";
                }
                this.checkboxLength = parseInt(this.checkboxLength) - 1;
                setTimeout(() => {
                    let flag: boolean = this.commonService.continueAction(tableId);
                    if (flag) {
                        this.indeterminate = false;
                        this.checked = false;
                    } else {
                        this.indeterminate = true;
                    }
                }, 200);
                //              this.dlvrNum="";
            }

        }, 300);

    }
    printSelectedReports(type) {
        let flag: boolean = this.commonService.continueAction(type);
        if (flag) {
            this.commonService.responseMessages("", "Please select atleast one purchase order", "warning");
            return false
        }
    }
    getpurchaseOrderList() {
        $("#sales-table").hide();
        $('#loadingIcon').show();
        $("#black-overlay").show();
        let url: any = this.environment.getRequiredApi("get_purchase_order_list") + "?"
        this.commonService.getData(url, "POST", this.purchaseListPayload, this.accessObjectId).subscribe((response) => {
            if (response.status == 0) {
                this.purchaseOrderDetailsList = response["data"].ex_po_list;
                this.purchaseOrderDetailslength = this.purchaseOrderDetailsList.length;
            } else {
                this.purchaseOrderDetailsList = [];
                this.purchaseOrderDetailslength = this.purchaseOrderDetailsList.length;
                this.commonService.responseMessages("", response.message, "warning")
            }

            $("#purchase-order-table").DataTable().destroy();
            $('#loadingIcon').hide();
            $("#black-overlay").hide();
            this.applyDataTable();

        });
    }
    applyDataTable() {
        setTimeout(() => {
            var table = $('#purchase-order-table').DataTable({
                "order": [[1, 'desc']],
                retrieve: true,
                "language": {
                    "emptyTable": "No data available",
                    "info": "Showing page _PAGE_ of _PAGES_",
                    "infoFiltered": "(filtered from _MAX_ total records)",
                    "searchPlaceholder": "Search..."
                },
                columnDefs: [{
                    "targets": 'no-sort',
                    "orderable": false
                }],
                "fnDrawCallback": function(oSettings) {
                    if (10 >= oSettings.fnRecordsDisplay()) {
                        $(oSettings.nTableWrapper).find('.dataTables_paginate').hide();
                        //     $(oSettings.nTableWrapper).find('.dataTables_filter').hide();
                        $(oSettings.nTableWrapper).find('.dataTables_info').hide();
                        //$(oSettings.nTableWrapper).find('.dataTables_length').hide();
                    } else {
                        $(oSettings.nTableWrapper).find('.dataTables_paginate').show();
                        //    $(oSettings.nTableWrapper).find('.dataTables_filter').show();
                        $(oSettings.nTableWrapper).find('.dataTables_info').show();
                        //  $(oSettings.nTableWrapper).find('.dataTables_length').show();
                    }
                },
            });
            this.dataTableRowsCount = table.page.info().recordsTotal;
            console.log(this.dataTableRowsCount + '-------');
            $('#purchase-order-table_filter input').val();
            $("#searchStock").remove();
            $("#purchase-order-table_filter").append("<i class='fa fa-search searchStock' id='searchStock'></i>");
            $("#purchase-table-table").show();
            setTimeout(() => {
                var width = $("#mainContent").css("width");
                $(".outbound-footer").css("width", width);
                $(".outbound-footer").show();
            }, 50);
        }, 500);
        setTimeout(() => {
            $(".dataTables_scrollHeadInner").css({ "width": "100%" });
            $(".table ").css({ "width": "100%" });
        }, 600);
    }
    extractData(id, spinnerId, ajaxDropdown) {
        let term: any = $("#" + id).val();
        if (term.length == 3) {
            $("#" + spinnerId).show();
            let url: any = this.environment.getRequiredApi("find_vendors") + "?org_id=" + this.orgId + "&bp_id=" + this.bpId + "&vendor=" + term + "&";
            this.commonService.getData(url, "GET", "", this.accessObjectId).subscribe(response => {
                if (response.status == 0) {
                    this.vendorNames = response["data"].ex_vendor_list;
                    $("#" + spinnerId).hide();
                    $("#" + ajaxDropdown).show();
                } else {
                    $("#" + spinnerId).hide();
                    $("#" + ajaxDropdown).show();
                }

            });
        } else {
            if (term == "") {
                this.vendorNames = [];
                $("#" + spinnerId).hide();
            } else {
                var searchText = term;
                $("#" + ajaxDropdown).find('ul > li').each(function() {
                    var currentLiText = $(this).text(),
                        showCurrentLi = currentLiText.indexOf(searchText) !== -1;
                    $(this).toggle(showCurrentLi);
                });
            }
        }
    }
    selectedItem(response, modalBlock, textInput, hiddenInput) {
        $("#" + textInput).val(response.vendor_name);
        $("#" + hiddenInput).val(response.vendor_id);
        $("#" + modalBlock).hide();
    }
    exportExcel() {
        let jsonArrrayData: any = [];
        console.log(this.purchaseOrderDetailsList);
        for (let index of this.purchaseOrderDetailsList) {
            if (!index.hasOwnProperty('po_number')) {
                index.po_number = "  "
            }
            if (!index.hasOwnProperty('vendor_name')) {
                index.vendor_name = "  "
            }
            if (!index.hasOwnProperty('po_date')) {
                index.po_date = ' ';
            }
            if (!index.hasOwnProperty('po_amount')) {
                index.po_amount = ' ';
            }
            if (!index.hasOwnProperty('status')) {
                index.status = " ";
            }
            jsonArrrayData.push(index);
        }
        let columns: any = ['po_number', 'vendor_name', 'po_date', 'po_amount', 'status']
        let columnHeaders: any = ['PO No', 'Vendor Name', 'PO Date', 'Amount', 'Status']
        let jsonData: any = JSON.stringify(jsonArrrayData);
        this.excelService.JSONToCSVConvertor(jsonArrrayData, "", "Purchase Order List", columns, columnHeaders, 'PurchaseOrder');
    }
}
