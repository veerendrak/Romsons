import { Component, OnInit, ChangeDetectorRef } from '@angular/core';
import { Http, Headers, Response, RequestOptions } from '@angular/http';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { Router } from '@angular/router';
import { AppComponent } from '../../app.component';
import {CommonService} from '../../services/common.service';
import { MessagePropertiesService } from '../../services/message-properties.service';
import { EnvConfigurationService } from '../../services/env-configuration.service';
import { ExcelService } from '../../services/excel.service';
declare var $: any;
declare var jQuery: any;
@Component({
    selector: 'app-gstr2-report',
    templateUrl: './gstr2-report.component.html',
    styleUrls: ['./gstr2-report.component.css']
})
export class Gstr2ReportComponent implements OnInit {
    public gstrdetailsForm: FormGroup;
    public bpId: string;
    public orgId: string;
    public accessObjId: string;
    gstrdetailsList: any = [];
    public material: any;
    public ajaxDropdown = false;
    public screenType: any;
    public actionFlag: any;
    public customertypeList: any;
    public emptyFlag: boolean = false;
    public cdListLength: any;
    public gstrdetailslength: any;
    totalPrice: any;
    totalIgstVal: any;
    totalCgstVal: any;
    totalSgstVal: any;
    totalGrossVal: any;
    constructor(private http: Http, private formBuilder: FormBuilder, private environment: EnvConfigurationService,
        private router: Router, private ref: ChangeDetectorRef, private app: AppComponent, private messagesService: MessagePropertiesService,
        private commonService: CommonService, private excelService: ExcelService) {
        this.bpId = localStorage.getItem("bpId");
        this.orgId = localStorage.getItem("orgId");
        this.accessObjId = localStorage.getItem("Reports Gallery")
        this.gstrdetailsForm = new FormBuilder().group(
            {
                'frmDate': ['', Validators.required],
                'toDate': ['', Validators.required]
            }
        );
        this.actionFlag = true;
        this.gstrdetailsList = [];
        this.cdListLength = 0;
        this.gstrdetailslength = 0;
        this.totalPrice = 0;
        this.totalIgstVal = 0;
        this.totalCgstVal = 0;
        this.totalSgstVal = 0;
        this.totalGrossVal = 0;
    }
    ngOnInit() {
        $('.datepicker-init').datetimepicker({
            widgetPositioning: {
                horizontal: 'left'
            },
            icons: {
                time: "fa fa-clock-o",
                date: "fa fa-calendar",
                up: "fa fa-arrow-up",
                down: "fa fa-arrow-down",
                previous: 'fa fa-arrow-left',
                next: 'fa fa-arrow-right'
            },
            format: 'DD-MM-YYYY',

        });
        this.applyDataTable();
    }
    changeTodatePicker(id) {
        $(id).datetimepicker("hide");
        this.gstrdetailsForm.controls['frmDate'].setValue($("#frmDate").val());
        if ($("#toDate").val() != "") {
            $("#toDate").val('');
            $("#toDate").datetimepicker("destroy");
        }
        var fromDateFilt = new Date();
        if ($("#frmDate").val().length != 0) {
            fromDateFilt = this.convertDate($("#frmDate").val())
        }
        $('#toDate').datetimepicker({
            widgetPositioning: {
                horizontal: 'left'
            },
            icons: {
                time: "fa fa-clock-o",
                date: "fa fa-calendar",
                up: "fa fa-arrow-up",
                down: "fa fa-arrow-down",
                previous: 'fa fa-arrow-left',
                next: 'fa fa-arrow-right'
            },
            format: 'DD-MM-YYYY',
            minDate: fromDateFilt
        });
    }

    public convertDate(date) {
        let dateArry = date.split("-");
        return new Date(dateArry[2], dateArry[1] - 1, dateArry[0]);
    }
    getgstr2Details() {
        this.totalPrice = 0;
        this.totalIgstVal = 0;
        this.totalCgstVal = 0;
        this.totalSgstVal = 0;
        this.totalGrossVal = 0;
        this.gstrdetailsList = [];
        $('#loadingIcon').show();
        $("#black-overlay").show();
        let fromDate, toDate;
        let splittedFromDate = $("#frmDate").val().split("-");
        fromDate = splittedFromDate[2] + splittedFromDate[1] + splittedFromDate[0];
        let splittedToDate = $("#toDate").val().split("-");
        toDate = splittedToDate[2] + splittedToDate[1] + splittedToDate[0];
        this.screenType = $("#txt_type").val();
        let url = "";
        url = this.environment.getRequiredApi('get_gstr2_details') + "?org_id=" + this.orgId + "&bp_id=" + this.bpId + "&from_date=" + fromDate + "&to_date=" + toDate + "&";
        this.commonService.getData(url, 'GET', "", this.accessObjId)
            .subscribe((response) => {
                console.log(response);
                if (response.status == '1') {
                    this.gstrdetailsList = [];
                    this.commonService.responseMessages('', response.message, 'warning');
                } else {
                    this.gstrdetailsList = [];
                    this.gstrdetailsList = response.data.ex_gstr2_list;
                    $("#filter-block").hide();
                    let data = response.data.ex_return;
                    if (response.data.hasOwnProperty("ex_return")) {
                        for (let index of data) {
                            if (index.type == "E") {
                                this.gstrdetailsList = [];
                                this.gstrdetailslength = 0;
                                $("#filter-block").show();
                                this.commonService.responseMessages('', index.message, 'warning');
                            }
                        }
                    }
                    for (let gstr1 of this.gstrdetailsList) {
                        this.totalPrice = this.totalPrice + parseFloat(gstr1.rate);
                        this.totalSgstVal = this.totalSgstVal + parseFloat(gstr1.sgst);
                        this.totalCgstVal = this.totalCgstVal + parseFloat(gstr1.cgst);
                        this.totalIgstVal = this.totalIgstVal + parseFloat(gstr1.igst);
                        this.totalGrossVal = this.totalGrossVal + parseFloat(gstr1.tax_val);
                    }


                }
                $('#cust-info-table').DataTable().destroy();
                this.applyDataTable();
                $('#loadingIcon').hide();
                $("#black-overlay").hide();
            }, err => {
                $('#loadingIcon').hide();
                $("#black-overlay").hide();
                console.log(err)
            });
    }
    removeStyles() {
        this.gstrdetailsForm.controls['frmDate'].setValue($("#frmDate").val());
        this.gstrdetailsForm.controls['toDate'].setValue($("#toDate").val());
    }
    applyDataTable() {
        setTimeout(() => {
            $("#cust-info-table").DataTable({
                retrieve: true,
                "bPaginate": false,
                "bInfo": false,
                "order": [0],
                "language": {
                    "emptyTable": "No data available",
                    "info": "Showing page _PAGE_ of _PAGES_",
                    "infoFiltered": "(filtered from _MAX_ total records)"
                },
                "fnDrawCallback": function(oSettings) {
                    if (5 >= oSettings.fnRecordsDisplay()) {
                        $(oSettings.nTableWrapper).find('.dataTables_paginate').hide();

                        $(oSettings.nTableWrapper).find('.dataTables_info').hide();
                    } else {
                        $(oSettings.nTableWrapper).find('.dataTables_paginate').show();
                        $(oSettings.nTableWrapper).find('.dataTables_filter').show();
                        $(oSettings.nTableWrapper).find('.dataTables_info').show();
                        $(oSettings.nTableWrapper).find('.dataTables_length').show();

                    }
                },
                "columnDefs": [{
                    "targets": 'no-sort',
                    "orderable": false,
                }],

            });
            $("#cust-info-table").css("display", "table !important")
        }, 500);

        setTimeout(() => {
            $(".dataTables_scrollHeadInner").css({ "width": "100%" });
            $(".table ").css({ "width": "100%" });
            //$("#cust-info-table_filter").append("<i class='fa fa-search searchStock' id='searchStock'></i>");
        }, 1100);
    }
    exportExcel() {
        let jsonArrrayData: any = [];
        if (this.gstrdetailsList.length != 0) {
            for (let index of this.gstrdetailsList) {
                if (!index.hasOwnProperty('inv_id')) {
                    index.inv_id = ' ';
                }
                if (!index.hasOwnProperty('invoice_date')) {
                    index.invoice_date = ' ';
                }
                if (!index.hasOwnProperty('suppl_type')) {
                    index.suppl_type = " ";
                }
                if (!index.hasOwnProperty('suppl_name')) {
                    index.suppl_name = " ";
                }
                if (!index.hasOwnProperty('pos')) {
                    index.pos = " ";
                }
                if (!index.hasOwnProperty('rate')) {
                    index.rate = " ";
                }
                if (!index.hasOwnProperty('tax_val')) {
                    index.tax_val = " ";
                }
                if (!index.hasOwnProperty('sgst')) {
                    index.sgst = " ";
                }
                if (!index.hasOwnProperty('cgst')) {
                    index.cgst = " ";
                }
                if (!index.hasOwnProperty('igst')) {
                    index.igst = " ";
                }
                if (!index.hasOwnProperty('inv_value')) {
                    index.inv_value = " ";
                }
                jsonArrrayData.push(index);
            }
            let columns: any = ['invoice_no', 'invoice_date', 'suppl_name', 'suppl_type', 'pos', 'rate', 'tax_val', 'sgst', 'cgst', 'igst', 'inv_value']
            let columnHeaders: any = ['Invoice No', 'Invoice Date', 'Supply Name', 'Supply Type', 'Place Of Supply', 'Rate', 'Tax Value', 'S/UGST', 'CGST', 'IGST', 'Invoice Value']
            let jsonData: any = JSON.stringify(jsonArrrayData);
            this.excelService.JSONToCSVConvertor(jsonArrrayData, "", "GSTR2 List", columns, columnHeaders, 'GSTR2');
        }
        else {
            this.commonService.responseMessages("", "No Data Available To Export", "warning")
        }
    }
    navigateToRepGallery() {
        const path: any = "rptsgallery";
        this.router.navigate([path]);
    }
    showFilters() {
        $("#filter-block").slideToggle();
    }
}
