import { Component, OnInit, Input,Output, EventEmitter,ChangeDetectorRef} from '@angular/core';
import { Http , Headers, Response,RequestOptions } from '@angular/http';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { Router,ActivatedRoute, Params} from '@angular/router';
import { AppComponent } from '../../app.component';
import {CommonService} from '../../services/common.service';
import { DateAdapter } from '@angular/material';
import { MessagePropertiesService } from '../../services/message-properties.service'; 
import {EnvConfigurationService} from '../../services/env-configuration.service';
declare var $: any; 
declare var jQuery: any;
declare var swal: any;

@Component({
  selector: 'app-edit-billing-details',
  templateUrl: './edit-billing-details.component.html',
  styleUrls: ['./edit-billing-details.component.css']
})
export class EditBillingDetailsComponent implements OnInit {
        
    public billingId:string;
     bpId:any;
     orgId:any;
    public billingItemsArray:any=[];
    public billingHeaders:any={};
    public remark='';
     public editBillingPayload:any={};
    public editBillingArray=[];
    public actionType:string='';
    public billingItemObject={};
    public billingItemArray:any=[];
    public errorLogs:any=[];
    public headerTextList:any;
    public textHidden:boolean = false;
    
    public textVal:string;
    
    public selectedKey:string="";
    
    public textBoxObject={};
    public prevArray =[];
    
    public emptyFlag:boolean=false;
    
    public headerListId:any={};
    public deliveryNum:string;

   constructor(private http: Http, private formBuilder: FormBuilder,private messagesService:MessagePropertiesService,private environment:EnvConfigurationService,
          private router: Router,private ref: ChangeDetectorRef,private app:AppComponent,private commonService:CommonService,private activatedRoute:ActivatedRoute) {
       
        this.bpId=localStorage.getItem("bpId");
        this.orgId=localStorage.getItem("orgId");
        this.billingHeaders["bill_type"]="";
       this.billingHeaders["bill_date"]="";
       this.billingHeaders["sold_to_name"]="";
       this.billingHeaders["ship_to_name"]="";
      
   } 
 

   ngOnInit() {

        this.textHidden = false; 
       this.getHeaderList();

       this.activatedRoute.queryParams.subscribe(params => {
           if (this.router.url.includes("billing")) {

               this.billingId = params['billId'];
               this.actionType = params['action'];
               this.deliveryNum=params['delvNo'];

               if (this.actionType == "U") {
                   this.editBillingPayload["bp_id"] = this.bpId;
                   this.editBillingPayload["org_id"] = this.orgId;

                 
                     
               }
            this.getBillingListOnBillId(this.billingId);

           }
       });
   }
    
    
    public getBillingListOnBillId(billId){
        
        
         
         let url = this.environment.getRequiredApi( 'get_billing_details_billid' )+"?bill_no="+billId+"&org_id="+this.orgId+"&bp_id="+this.bpId+"&";
      
        this.commonService.getData( url, 'GET', '',localStorage.getItem( 'Billing' ))
            .subscribe(( response ) => {
              
                if(response.status == 0){
                     this.billingItemsArray = response.data.ex_bill_item;
                   this.billingHeaders = response.data.ex_bill_hdr[0];
                    
                }else{
                   this.billingItemsArray=[]; 
                }
               
               
            }, err => {
                  
                    console.log(err)   
                
               
                //this.reqdata.responseMessages(err, err.status, 'danger');
            } );
    }
    
    public backToBillingDetails(){
        const path:any='billing';
        this.router.navigate([path]);
    }
    
    saveEditBilling() {


        let url = this.environment.getRequiredApi('manage_bill_details') + "?";


        this.editBillingPayload["im_action"] = 'EB'

        //this.billingItemObject["text_id"] = $("#header_Text").val();
        
        if (this.emptyFlag) {
            for (let index in this.headerListId) {
                if (this.headerListId[index].length != 0) {
                    this.billingItemObject = {};
                    this.billingItemObject["billing_no"] = this.billingId;
                    this.billingItemObject["object_name"] = "VBBK";
                    this.billingItemObject["text_id"] = index;
                    this.billingItemObject["text_line"] = this.headerListId[index];
                    this.billingItemArray.push(this.billingItemObject);


                }
            }
        }else{
                    this.billingItemObject["billing_no"] = this.billingId;
                    this.billingItemObject["object_name"] = "VBBK";
                    this.billingItemObject["text_id"] = "";
                    this.billingItemObject["text_line"] = "";
                    this.billingItemArray.push(this.billingItemObject);
        }
       
        
        this.editBillingPayload["im_billing_no"] = this.billingItemArray;
        
      
        console.log(this.editBillingPayload);

          this.commonService.getData(url, 'POST', this.editBillingPayload, localStorage.getItem('Billing'))
            .subscribe((response) => {
                if (response.status == 0) {
                    this.billingItemObject = {};
                    this.billingItemArray=[];
                   
                    this.errorLogs =[];
                    if (response.data.hasOwnProperty("ex_return")) {
                        for(let index in response.data.ex_return){
                            if ("S" != response.data.ex_return[index].type) {
                            this.errorLogs = response.data.ex_return;
                           
                        }
                        }
                        
                        if(this.errorLogs.length != 0){
                             $("#displayErrorsModal").modal("show");
                        }
                        if(response.data.ex_return.length != 0 && "S" == response.data.ex_return[0].type){
                             this.commonService.responseMessages("", "Billing saved successfully", "success");
                        }

                    }


                    console.log(response.data);
                }
                if (response.status == 1) {
                    this.commonService.responseMessages("", response.message, "warning");
                }

            }, err => {

                console.log(err)


            });
        
    }
    closeModal(id) {
        $("#" + id).modal("hide");
    }
    
    getHeaderList() {

        let url = this.environment.getRequiredApi('header_dropdown') + "?group=BHDRS&";

        this.commonService.getData(url, "GET", '', "")
            .subscribe((response) => {
                console.log(response);
                this.headerTextList = response.data.configValues;
                let headerList = this.headerTextList;
                for(let index in headerList){
                    this.headerListId[headerList[index].key]="";
                    
                }
                this.emptyFlag=false;
            });
    }
    
    addTextBox(key){
        
        for(let index in this.headerListId){
            let prevKeyVals = this.headerListId[index];
            if(index == key){
                
            }else{
                $("#header_"+index).hide();
            }    
        }
       
        $("#header_"+key).removeAttr("style");
        
        $("#header_"+key).val(this.headerListId[key]);
        
       
        console.log(this.headerListId);
      
        
        
    }
    onChange(event: any,key) {
        this.emptyFlag =true;
       this.headerListId[key] = event.target.value;
    };
    
    navigateToEditBilling(){
        const path:any='billing/editbillingdetails';
        this.router.navigate([path],{ queryParams: {"billId":this.billingId,"delvNo":this.deliveryNum,"action":"U"} });
    }

}
