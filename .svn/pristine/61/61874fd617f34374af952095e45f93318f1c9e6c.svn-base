import { Component, OnInit, ChangeDetectorRef } from '@angular/core';
import { Http , Headers, Response,RequestOptions } from '@angular/http';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { Router } from '@angular/router';
import { AppComponent } from '../../app.component';
import {CommonService} from '../../services/common.service';
import { MessagePropertiesService } from '../../services/message-properties.service';
import {EnvConfigurationService} from '../../services/env-configuration.service';

declare var $: any; 
declare var jQuery: any;
declare var swal: any;

@Component({
  selector: 'app-stock-balance',
  templateUrl: './stock-balance.component.html',
  styleUrls: ['./stock-balance.component.css']
})
export class StockBalanceComponent implements OnInit {

  bpId:any;
  orgId:any;
  accessObjectId:any;
  downloadUrl:any;
  pageNum:any;
  pageSize:any;
  sortBy:any;
  stockBalanceList:any;
  stockBalanceListLength:any;
  paginationCount:any;
  paginationArray:any;
  startIndex:any;
  endIndex:any;
  totalEndCount:any;
  sortOrder:any;
  constructor(private http: Http, private formBuilder: FormBuilder,
          private router: Router,private ref: ChangeDetectorRef,private app:AppComponent, private messagesService:MessagePropertiesService,
          private commonService:CommonService,private environment:EnvConfigurationService) {
      this.app.isActive=true;
      this.bpId=localStorage.getItem("bpId");
      this.orgId=localStorage.getItem("orgId");
      this.accessObjectId=localStorage.getItem("openingstockbalance");
      this.pageNum=1;
      this.pageSize=10;
      this.sortBy=null;
      this.stockBalanceList=[];
      this.stockBalanceListLength=0;
      this.paginationArray=[];
      this.sortOrder="asc";
  }

  ngOnInit() {
      this.downloadUrl=this.environment.getRequiredApi("download_stock_excl")+"?bp_id="+this.bpId+"&org_id="+this.orgId+"&access_obj_id="+this.accessObjectId+"&access_token"+localStorage.getItem("token");
      $("#stock-balance-table").DataTable({
          bSort:false,
          bPaginate:false,
          "language": {
              "emptyTable": "No data available",
              "info": "Showing page _PAGE_ of _PAGES_",
              "infoFiltered": "(filtered from _MAX_ total records)"
            },
           "bInfo":false
      });
      setTimeout(()=>{
          $("#stock-balance-table_filter").append("<i class='fa fa-search searchStock' id='searchStock'></i>");
      });
      this.getStockBalanceDetails();
      $("input[type=file]").change(function(){
          var file = this.files[0];
          var regex = /^([a-zA-Z0-9\s_\\.\-:])+(.csv|.xml)$/;
          var fileName = $( "#stockFile" ).val()
          fileName = fileName.replace(/[&\/\\#,+()$~%.'":*?<>{}]/g,' ');
          var stockBalanceFile = {
                  "material":"Material",
                  "description":"Description",
                  "batch": "Batch",
                  "qty": "Qty",
                  "price": "Price",
                  "closing_stock_value": "Closing Stock Vlue"
              };

          $( "#loadingIcon" ).show();
          $( "#black-overlay" ).show();
          if ( regex.test( fileName.toLowerCase() ) ) {
              if ( typeof ( FileReader ) != "undefined" ) {
                  var reader = new FileReader();
                  reader.onload = function( e: any ) {
                      var table = $( "<table />", {
                          id: 'uploadCsvData',
                          class: 'table table-hover nowrap scrollData',
                          style: 'overflow-x:scroll; display:block'
                      } );
                      var rowthead = $( "<thead/>", {
                          class: "thead-default"
                      } );
                      var rowtbody = $( "<tbody />" );
                      if ( e.target.result.length == 1 ) {
                          $.notify( {
                              title: '',
                              message: "No data available in the uploaded file"
                          }, {
                                  type: "warning"
                              } );
                          $( "#loadingIcon" ).hide();
                          $( "#black-overlay" ).hide();
                          return false;
                      }

                      var rowslist = e.target.result.split( "\n" );
                      rowslist=rowslist.filter(function(e){return e});
                      var rowsCount;
                      
                      var rows=[];
                      var count=0;
                      $.each(rowslist,function(i){
                          if(rowslist[i].includes("Supply Type,")){
                              count=i++;
                              rows.push(rowslist[0]);
                          }else{
                              if(count!=0){
                                  rows.push(rowslist[i]); 
                              }
                          }
                      });
                      
                      if(rows.length>1500){
                          rowsCount=1500;    
                      }else{
                          rowsCount=rows.length;     
                      }
                      for ( var i = 0; i < rowsCount; i++ ) {
                          var row = $( "<tr />" );
                          var cells;
                          cells = rows[i].split( "," );
                          for ( var j = 0; j < cells.length; j++ ) {
                              var cell;
                              var div;
                                  var invLength=Object.keys(stockBalanceFile).length;
                                  if ( i == 0 ) {
                                      div = $( "<div />", { style: 'min-width:100px' } );
                                      cell = $( "<th />" )
                                      if ( cells[j] != null && cells[j] != undefined ) {
                                          
                                              if ( stockBalanceFile[cells[j]] != null || stockBalanceFile[cells[j]] != undefined ) {
                                                  if(j<=invLength-1){
                                                      div.html( stockBalanceFile[cells[j]] );
                                                  }
                                              }
                                              else {
                                                  if(j<=invLength-1){
                                                      div.html( cells[j] );
                                                  }
                                              }

                                          
                                      }
                                      cell.html( div );
                                      row.append( cell );
                                      //rowthead.append(row);
                                  } else {
                                     // if ( i >= 1 ) {
                                          cell = $( "<td />" );
                                          if ( cells[j] != null && cells[j] != undefined ) {
                                              if(j<=invLength-1){
                                                  cell.html( cells[j] );
                                              }
                                          }
                                          row.append( cell );
                                          //rowtbody.append(row);
                                     // }
                                  }
                              }
                              
                          if ( i == 0 ) {
                              rowthead.append( row );
                              table.append( rowthead );
                          } else {
                              if ( row.find( "td" ).length == table.find( "th" ).length ) {
                                  rowtbody.append( row );
                                  table.append( rowtbody );
                              }
                          }

                      }


                      $( "#ulCsvContent" ).html( '' );
                      $( "#ulCsvContent" ).append( table );
                      var data = $( "#ulCsvContent" ).html();
                      if ( data != null ) {
                          setTimeout( function() {
                              $( '#gettingCsvContent' ).show();
                              $( "#uploadSubmitButton" ).show();
                              $( "#backtoupload" ).show();
                              $( "#success-backtoupload" ).hide();
                              $( '#uploadCsvContent' ).hide();
                              $( "#nextButtonDetails" ).hide();
                              
                              $( '#uploadSubmitButton' ).css( 'cursor', 'pointer' );
                              if ( $( '#uploadCsvData' ).find( 'td' ).hasClass( 'dataTables_empty' ) ) {
                                  $( '#uploadSubmitButton' ).prop( 'disabled', true );
                                  $( '#uploadSubmitButton' ).css( 'cursor', 'not-allowed !important;' );
                              } else {
                                  $( '#uploadSubmitButton' ).prop( 'disabled', false );
                              }
                          }, 800 );
                          setTimeout(function(){
                              try{
                              $( "#uploadCsvData" ).DataTable( {
                                  "language": {
                                      "emptyTable": "No data available",
                                      "info": "Showing page _PAGE_ of _PAGES_",
                                      "infoFiltered": "(filtered from _MAX_ total records)"
                                  },
                                  "order": [[ 0, "desc" ]],
                                  columnDefs: [{
                              targets: ['_all'],
                            //render: $.fn.dataTable.render.ellipsis()
                                  render: function( data, type, row ) {
                                      
                                    return data.length > 10 ? data.substr(0, 15) + '...' : data;
                                 }
                              }],
                               "fnDrawCallback": function(oSettings) {
                                 if (10 >= oSettings.fnRecordsDisplay()) {
                                   $(oSettings.nTableWrapper).find('.dataTables_paginate').hide();
                              //     $(oSettings.nTableWrapper).find('.dataTables_filter').hide();
                                   $(oSettings.nTableWrapper).find('.dataTables_info').hide();
                                   //$(oSettings.nTableWrapper).find('.dataTables_length').hide();
                                 } else {
                               $(oSettings.nTableWrapper).find('.dataTables_paginate').show();
                             //    $(oSettings.nTableWrapper).find('.dataTables_filter').show();
                                 $(oSettings.nTableWrapper).find('.dataTables_info').show();
                                   //  $(oSettings.nTableWrapper).find('.dataTables_length').show();
                                 }
                               }
                              });
                              setTimeout(() => {
                                  $( ".dataTables_scrollHeadInner" ).css( { "width": "100%" } );

                                  $( ".table " ).css( { "width": "100%" } );

                              }, 600 );
                              $( "#loadingIcon" ).hide();
                              $( "#black-overlay" ).hide();
                              }catch(e){
                                  $( "#loadingIcon" ).hide();
                                  $( "#black-overlay" ).hide();
                              }
                          },600)
                      }
                  }
                  reader.readAsText( $( "#stockFile" )[0].files[0] );
              } else {
                  alert( "This browser does not support HTML5." );
              }
          }else{
              $( "#loadingIcon" ).hide();
              $( "#black-overlay" ).hide();
              alert( "Please upload a valid CSV file." ); 
          }
      });
      var url = this.environment.getRequiredApi('');
      var bpId = this.bpId;
      var accessObjId=this.accessObjectId;
      $("#uploadStockSubmit").click(function(){
          $( '#loadingIcon' ).show();
          $( "#black-overlay" ).show();
          var formdata = new FormData( $( "#csvUploadDataForm" )[0] );
          $.ajax( {
              url: url + "?access_token=" + localStorage.getItem( 'token' ) + "&bpId=" + bpId+"&accessObjId="+accessObjId,
              type: "POST",
              data: formdata,
              cache: false,
              contentType: false,
              processData: false,
              success: function( data ) {
                  //$('#cardtitle').show();
                  if(data.status==0){
                      $( "#loadingIcon" ).hide();
                      $( "#black-overlay" ).hide();
                      $.notify( {
                          title: '<strong></strong>',
                          message: "Uploded File successfully"
                      }, {
                              type: 'warning'
                          } ); 
                  }else{
                      $( "#loadingIcon" ).hide();
                      $( "#black-overlay" ).hide();
                      $.notify( {
                          title: '<strong></strong>',
                          message: "Mismatched File for the selected dataload type"
                      }, {
                              type: 'warning'
                          } ); 
                  }
              },
              error: function( data ) {
                  $( '#loadingIcon' ).hide();
                  $( "#black-overlay" ).hide();
                  if ( data.status == 403) {
                      var errorMessage=data.responseJSON['message'];
                      $.notify( {
                          title: '<strong></strong>',
                          message: errorMessage
                      }, {
                              type: 'warning'
                          } );   
                  }else{
                      $.notify( {
                          title: '<strong></strong>',
                          message: "Max File size limit is reached. Please reload the file with not more than 6000 records."
                      }, {
                              type: 'warning'
                          } );  
                  }

                  
              }
          } );
      
      });
  }
  getStockBalanceDetails(){
      $('#loadingIcon').show();
      $("#black-overlay").show();
      let url:any=this.environment.getRequiredApi("get_stock_balance_details")+"?org_id="+this.orgId+"&pg_num="+this.pageNum+"&pg_size="+this.pageSize+"&sort_by="+this.sortBy+"&";
      url=url.replace("{bp_id}",this.bpId);
     this.commonService.getData(url, "GET", "", this.accessObjectId).subscribe(response=>{
        if(response.status==0){
            this.pageNum=response.pgNum;
            this.pageSize=response.pgSize;
            this.sortBy=response.sortBy;
            let recordsCount:number=response.ttlCnt;
            let recordsSize:number=response.pgSize;
            let pagePer:number=recordsCount % recordsSize;
            this.paginationCount=recordsCount/recordsSize;
            if(pagePer==0){
                this.paginationCount= this.paginationCount;     
              }else{
                 this.paginationCount=this.paginationCount+1; 
              }
            this.paginationArray=[];
            for(let i=1; i<=this.paginationCount; i++){
                let j=i;
                this.paginationArray.push(j);    
            }
            this.startIndex=0;
            this.endIndex=this.paginationArray.length;
            this.totalEndCount=this.endIndex-1;
            var columnList=this.sortBy;
            var columnOrder=this.sortOrder;
            var orderArray;
            var arrayColumn=[];
            if(columnList.length=='0'){
                orderArray=[[2,"asc"]]; 
            }else{
                for(var id in columnList){
                        var customorderArray=[];
                        customorderArray.push(columnList[id]);
                        customorderArray.push(columnOrder);
                        arrayColumn.push(customorderArray);
                        
                }
                orderArray=arrayColumn;
                this.stockBalanceList=response.stocks;
                this.stockBalanceListLength=this.stockBalanceList.length;
                var pageno=this.pageNum;
                var total=this.paginationArray.length;
                $("#stock-balance-table").DataTable().destroy();
                setTimeout(function(){
                    var table = $('#stock-balance-table').DataTable({
                       "order": orderArray,
                       retrieve:true,
                       "language": {
                           "emptyTable":     "No data available"
                       },
                       columnDefs: [ {
                                    "targets": 'no-sort',
                                     "orderable": false
                               } ],
                       bPaginate: false,
                       bInfo:false
                             });
                    setTimeout(()=>{
                        $("#stock-balance-table_filter").append("<i class='fa fa-search searchStock' id='searchStock'></i>");
                    });
                    $('.pageNum').each(function(i){
                        $(this).removeClass('active-1');
                        $("#previous").removeAttr('style');
                        $("#next").removeAttr('style');
                        $("#"+pageno).addClass('active-1');
                      var selectpreviousPage=pageno-2;
                      var currentpage=pageno-1
                      var selectnextpage=pageno;
                        if(total>5){
                            var count=5;
                          if(i<count){
                              if(pageno!=5 && pageno<5 ){
                                      $("#previous-wrapper").hide(); 
                                      $(this).parent().show();
                                  }else{
                                   $("#previous-wrapper").show(); 
                                  $("#previous-wrapper").attr('style','margin-left:-6px;');
                                  $("#page-0").show();
                                   $(this).parent().hide();
                                   $("#page-"+selectpreviousPage).show();
                                  $("#page-"+currentpage).show();
                              }
                          }else{
                            $(this).parent().hide();
                            $("#next-wrapper").show();
                              if(pageno>=5){
                                  $("#page-"+selectpreviousPage).show();
                                  $("#page-"+currentpage).show();
                                  $("#page-"+selectnextpage).show();
                                  }
                              var tCount=total-1;
                              var nextCount=total-4;
                            if(i==tCount){
                               $(this).attr('style','margin-left:-6px;');
                               $(this).parent().show();
                            } 
                            if(selectnextpage==total || selectnextpage==tCount || selectpreviousPage==nextCount){
                                $(this).removeAttr('style');
                                $("#next-wrapper").hide();
                            }
                          }    
                        }else{
                            $(this).parent().show();
                        }
                         if(pageno==1){
                              $("#previous").attr('style','background:#f2f4f8; cursor:text;color:#6d6c6c !important;');    
                         }else{
                            if(pageno==total){
                               $("#next").attr('style','background:#f2f4f8; cursor:text;color:#6d6c6c !important;'); 
                            }  
                         }  
                  });
                  $('#loadingIcon').hide();
                  $("#black-overlay").hide();
           },500);
            }
        }else{
            this.stockBalanceList=[];
            this.stockBalanceListLength=0;
            $('#loadingIcon').hide();
            $("#black-overlay").hide();
            setTimeout(()=>{
                $("#stock-balance-table").DataTable().destroy();
                $("#stock-balance-table").DataTable({
                    "order": [[2,"asc"]],
                    retrieve:true,
                    bSort:false,
                    bPaginate:false,
                    "language": {
                        "emptyTable": "No data available",
                        "info": "Showing page _PAGE_ of _PAGES_",
                        "infoFiltered": "(filtered from _MAX_ total records)"
                      },
                     "bInfo":false
                });
                setTimeout(()=>{
                    $("#stock-balance-table_filter").append("<i class='fa fa-search searchStock' id='searchStock'></i>");
                })
                
            },500)
            
        } 
     });
  }
navigatePreviousPage(){
    let pageNum:number=parseInt(this.pageNum);
    pageNum=pageNum-1;
    if(pageNum!=0){
       this.pageNum=pageNum;
       this.pageSize=$("#showPageSize").val();
       this.getStockBalanceDetails();
    }else{
        return false    
    }
}
navigateNextPage(pageNum){
    this.pageNum=parseInt(pageNum);
    this.pageSize=$("#showPageSize").val();
     this.getStockBalanceDetails();
}
navigatePageNext(){
    let pageNum:number=parseInt(this.pageNum);
     pageNum=pageNum+1;
     let count:number=this.paginationArray.length;
     if(pageNum<=count){
         this.pageNum=pageNum;
         this.pageSize=$("#showPageSize").val();  
         this.getStockBalanceDetails();
    }else{
         return false    
     } 
}
filterPageSizeRecords(){
    this.pageNum=1;
    this.pageSize=$("#showPageSize").val();
    this.getStockBalanceDetails();

}
uploadStockExcel(){
    $("#stockFile").click();
}

}
