import { Component, OnInit, Input,Output, EventEmitter,ChangeDetectorRef} from '@angular/core';
import { Http , Headers, Response,RequestOptions } from '@angular/http';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { Router,ActivatedRoute, Params} from '@angular/router';
import { AppComponent } from '../../app.component';
import {CommonService} from '../../services/common.service';
import { DateAdapter } from '@angular/material';
import { MessagePropertiesService } from '../../services/message-properties.service'; 
import {EnvConfigurationService} from '../../services/env-configuration.service';
declare var $: any; 
declare var jQuery: any;
declare var swal: any;

@Component({
  selector: 'app-billing',
  templateUrl: './billing.component.html',
  styleUrls: ['./billing.component.css']
})
export class BillingComponent implements OnInit {
   billingDetailsPage:boolean=false;
   public deliveryNumber:string;
   public billingDate:string;  
   public createBillingPayload:any={};
    public bpId:string;
     public orgId:string;
    public deliveryItemArray=[];
    public deliveryItemObject={};
    public outBoundDelPayload:any={};    
    outBoundDeliveryFormObject:any=[];
    public billingDocNum:string;
    public errorLogs:any=[];
    
    genDisplayBillingDetObject:any={};
    genDisplayBillingDetArray:any=[];
    public deliveryDate:string;
    public responseAddress:any={};
    public headerTextList:any;
    
    public headerListId:any={};
     public emptyFlag:boolean=false;
    public createFlag:boolean;
    
    createBillingForm:FormGroup;
    billingDetMsg:any;
    billingArrayEdit:any=[];
    cancelBillingPayload:any={};
    billingObjectEdit:any={};
    accessObjId:string;
    
    cancelBillingFlag = false;
    
    totalIgstVal:any;
    totalCgstVal:any;
    totalSgstVal:any;
    totalGrossVal:any;
    totalNetVal:any;
    totalDisAmt:any;
    fkDate:any;
    backDatedForm:FormGroup;
    aeDate:any;
    addressDetailsBilling:string;
    
  constructor(private http: Http, private formBuilder: FormBuilder,private messagesService:MessagePropertiesService,private environment:EnvConfigurationService,
          private router: Router,private ref: ChangeDetectorRef,private app:AppComponent,private commonService:CommonService,private activatedRoute:ActivatedRoute) {
      this.app.isActive=true;
      this.billingDetailsPage=true;
      this.bpId = localStorage.getItem("bpId");
      this.orgId = localStorage.getItem("orgId");
      
       this.createBillingForm = formBuilder.group({
          hideRequired: false,
          floatLabel: 'auto',
          'docNumber': ['', Validators.required],
          'billingDate':['', Validators.required],
        });
       this.billingDetMsg = messagesService.billing_det_msg;
       this.totalIgstVal = 0;
       this.totalCgstVal = 0;
       this.totalSgstVal = 0;
       this.totalGrossVal = 0;
       this.totalNetVal = 0;
       this.totalDisAmt = 0;
      this.backDatedForm = formBuilder.group({
          
          'fkDate':['', Validators.required],
        });
      
  }

  ngOnInit() {
      
      
     
      
      this.getHeaderList();
      
      this.activatedRoute.queryParams.subscribe(params => {
           if(this.router.url.includes("billing")){
               
               this.billingDate = params['billDate'];
               this.createBillingPayload["org_id"]=this.orgId;
                  this.createBillingPayload["bp_id"]=this.bpId;
                   this.createBillingPayload["im_billing_date"] = this.billingDate;
               
              if (params['action'] == "C") {
                  this.deliveryNumber = params['delvNo'];
                  this.billingDate = params['billDate'];
                  
                  this.deliveryDate = this.billingDate.substring(6, 8)+"-"+this.billingDate.substring(4, 6)+"-"+this.billingDate.substring(0, 4)
                  this.createBillingPayload["im_action"]=params['action'];
                  this.createBillingPayload["org_id"]=this.orgId;
                  this.createBillingPayload["bp_id"]=this.bpId;
                   this.createBillingPayload["im_billing_date"] = this.billingDate;
                  
                  
               /*   this.deliveryItemObject["object_name"] = "";
                  this.deliveryItemObject["text_id"] = "";
                  this.deliveryItemObject["text_line"] = "";
                  this.deliveryItemObject["billing_no"] = "";
                  this.deliveryItemObject["high"] = "";
                  this.deliveryItemObject["low"] = "";
                  this.deliveryItemObject["option"] = "";
                  this.deliveryItemObject["sign"] = "";*/
                 // this.deliveryItemObject["delv_no"]=this.deliveryNumber;
                  
                  /*let splittedDateArray = this.billingDate.split("-");
                  this.deliveryItemObject["im_billing_date"] = splittedDateArray[2]+splittedDateArray[1]+splittedDateArray[0];*/
                 
                   //this.deliveryItemArray.push(this.deliveryItemObject);
                  
              }
          } 
          this.getBillingDetailsWithDeliveryNum(this.deliveryNumber);
      });
      
  }
    
    
    createBillingDetails(){
        
        let priceFlag = false;

        for (let itemList of this.genDisplayBillingDetArray) {

            if (itemList.price == 0) {
                priceFlag = true;
                this.commonService.responseMessages("", "Price is not available for this" + itemList.material, "warning");
                break;
            }

        }
        if (priceFlag) {
            return false;
        }
        
        $('#loadingIcon').show();
        $("#black-overlay").show();
        this.createFlag = false;
        let url = this.environment.getRequiredApi('manage_bill_details') + "?";


        this.createBillingPayload["im_action"] = 'CB';
        this.createBillingPayload["im_delv_no"] = [];
        let fkDateArray = this.backDatedForm.value.fkDate.split("-");
        this.createBillingPayload["im_billing_date"] = fkDateArray[2] + fkDateArray[1] + fkDateArray[0];
        this.deliveryItemArray = [];

        if (this.emptyFlag) {
            for (let index in this.headerListId) {
                if (this.headerListId[index].length != 0) {
                    this.deliveryItemObject = {};
                    this.deliveryItemObject["delv_no"] = this.deliveryNumber;
                    this.deliveryItemObject["object_name"] = "VBBK";
                    this.deliveryItemObject["text_id"] = index;
                    this.deliveryItemObject["text_line"] = this.headerListId[index];
                    this.deliveryItemArray.push(this.deliveryItemObject);


                }
            }
        } else {
            this.deliveryItemObject["delv_no"] = this.deliveryNumber;
            this.deliveryItemObject["object_name"] = "VBBK";
            this.deliveryItemObject["text_id"] = "";
            this.deliveryItemObject["text_line"] = "";
            this.deliveryItemArray.push(this.deliveryItemObject);
        }

        this.createBillingPayload["im_delv_no"] = this.deliveryItemArray;


        console.log(this.createBillingPayload);
   
      this.commonService.getData( url, 'POST', this.createBillingPayload,localStorage.getItem( 'Billing' ))
          .subscribe((response) => {
              $('#loadingIcon').hide();
              $("#black-overlay").hide();
              this.errorLogs = [];
              if (response.status == 0) {
                  if (response.data.hasOwnProperty("ex_success")) {
                      for (let billIndex in response.data.ex_success) {
                          this.billingDocNum = response.data.ex_success[billIndex].bill_doc;

                      }

                  }
                  if (response.data.hasOwnProperty("ex_error")) {

                      for (let index in response.data.ex_error) {
                          if ("E" == response.data.ex_error[index].type) {
                              this.errorLogs = response.data.ex_error;

                          }
                      }

                      if (this.errorLogs.length != 0) {
                          $("#displayErrorsModal").modal("show");
                      }

                  }

                  if (this.errorLogs.length == 0) {
                      this.commonService.responseMessages("", "Billing (" + this.billingDocNum + ")  created successfully", "success");
                      //setTimeout(()=>{
                      const path: any = "billing/editbillingdetails";

                      this.router.navigate([path], { queryParams: { "billId": this.billingDocNum, "delvNo": this.deliveryNumber, "action": "DIS" } });


                      //     },     
                  }

                  $('#loadingIcon').hide();
                  $("#black-overlay").hide();


              }
              if (response.status == 1) {
                  this.commonService.responseMessages("", response.message, "warning");
              }

            }, err => {
                  
                    console.log(err)   
                $('#loadingIcon').hide();
               $("#black-overlay").hide();
               
            } );
        
    }
    
    getBillingDetailsWithDeliveryNum(deliveryNum){
         
        $('#loadingIcon').show();
        $("#black-overlay").show();
        this.deliveryItemObject["delv_no"] = deliveryNum;
        this.deliveryItemObject["object_name"] = "VBBK";
        this.deliveryItemObject["text_id"] = "";
        this.deliveryItemObject["text_line"] = "";
        this.deliveryItemArray.push(this.deliveryItemObject);
        this.createFlag=true;

        this.createBillingPayload["im_delv_no"] = this.deliveryItemArray;

        this.createBillingPayload["im_action"] = 'SB';
        console.log(this.createBillingPayload);

        let url = this.environment.getRequiredApi('manage_bill_details') + "?";

        this.commonService.getData(url, 'POST', this.createBillingPayload, localStorage.getItem('Billing'))
            .subscribe((response) => {

                if (response.status == 0) {
                    if (response.data.hasOwnProperty("ex_error_log")) {

                        for (let errorIndex in response.data.ex_error_log) {
                            if ("E" == response.data.ex_error_log[errorIndex].msgty) {
                                this.errorLogs = response.data.ex_error_log;
                                break;   
                            }
                            
                        }
                        if (this.errorLogs.length != 0) {
                                $('#loadingIcon').hide();
                                $("#black-overlay").hide();
                                $("#displayErrorsModal").modal("show");
                                 $("#billing-details").DataTable().destroy();
                                this.applyDataTable();
                            }
                        $('#loadingIcon').hide();
                        $("#black-overlay").hide();

                    }
                    if(response.data.hasOwnProperty("ex_bill_hdr")){
                        this.fkDate=response.data.ex_bill_hdr[0].fkdat;
                        this.aeDate=response.data.ex_bill_hdr[0].aedat;
                        this.backDatedForm.value.fkDate = this.fkDate;
                        var docDate= this.aeDate
                        console.log(docDate)
                        $('#docDatepicker').datetimepicker({
                            debug: false,
                            widgetPositioning: {
                                horizontal: 'left'
                            },
                            icons: {
                                time: "fa fa-clock-o",
                                date: "fa fa-calendar",
                                up: "fa fa-arrow-up",
                                down: "fa fa-arrow-down",
                                previous: 'fa fa-arrow-left',
                                next: 'fa fa-arrow-right'
                            },
                            format: 'DD-MM-YYYY',
                            minDate: docDate

                        });
                        
                        
                    }

                    if (response.data.hasOwnProperty("ex_bill_cal_data")) {

                        this.genDisplayBillingDetArray = response.data.ex_bill_cal_data;
                        
                        for(let element in this.genDisplayBillingDetArray){
                            this.genDisplayBillingDetArray[element].fix_sch = Math.abs(this.genDisplayBillingDetArray[element].fix_sch)
                            this.genDisplayBillingDetArray[element].sch_val = Math.abs(this.genDisplayBillingDetArray[element].sch_val)
                            this.genDisplayBillingDetArray[element].dis_amt = Math.abs(this.genDisplayBillingDetArray[element].dis_amt)
                            this.genDisplayBillingDetArray[element].dis_val = Math.abs(this.genDisplayBillingDetArray[element].dis_val)
                            this.genDisplayBillingDetArray[element].sgst_rate = Math.abs(this.genDisplayBillingDetArray[element].sgst_rate)
                            this.genDisplayBillingDetArray[element].cgst_rate = Math.abs(this.genDisplayBillingDetArray[element].cgst_rate)
                            this.genDisplayBillingDetArray[element].igst_rate = Math.abs(this.genDisplayBillingDetArray[element].igst_rate)
                            
                            this.totalIgstVal = this.totalIgstVal + parseFloat(this.genDisplayBillingDetArray[element].igst_amt);
                            this.totalCgstVal = this.totalCgstVal + parseFloat(this.genDisplayBillingDetArray[element].cgst_amt)
                            this.totalSgstVal = this.totalSgstVal + parseFloat(this.genDisplayBillingDetArray[element].sgst_amt);
                            this.totalNetVal = this.totalNetVal + parseFloat(this.genDisplayBillingDetArray[element].net_val);
                            this.totalDisAmt = this.totalDisAmt + parseFloat(this.genDisplayBillingDetArray[element].dis_amt);
                            
                            
                           this.totalGrossVal = this.totalGrossVal+ parseFloat(this.genDisplayBillingDetArray[element].total_amt);
                        }
                        
                        console.log(this.genDisplayBillingDetArray);
                    }
                    /*  if(response.data.hasOwnProperty("ex_bill_item")){
                          
                         
                          for(let billIndex in  response.data.ex_bill_item){
                              this.genDisplayBillingDetObject={};
                              this.genDisplayBillingDetObject["material"] = response.data.ex_bill_item[billIndex].matnr;
                              this.genDisplayBillingDetObject["uom"] = response.data.ex_bill_item[billIndex].meins;
                              this.genDisplayBillingDetObject["description"] = response.data.ex_bill_item[billIndex].arktx;
                              this.genDisplayBillingDetObject["itemNum"] = response.data.ex_bill_item[billIndex].posnr;
                              this.genDisplayBillingDetObject["netwr"]= response.data.ex_bill_item[billIndex].netwr;
                              this.genDisplayBillingDetObject["qty"]= response.data.ex_bill_item[billIndex].fkimg;
                              
                              this.genDisplayBillingDetObject["price"] = "";
                              this.genDisplayBillingDetObject["fix_sch"] = "";
                              this.genDisplayBillingDetObject["sch_val"] = "";
                              this.genDisplayBillingDetObject["dis_amt"] = "";
                              this.genDisplayBillingDetObject["dis_val"] = "";
                              this.genDisplayBillingDetObject["cgst_rate"] = "";
                              this.genDisplayBillingDetObject["cgst_amt"] = "";
                              this.genDisplayBillingDetObject["igst_rate"] = "";
                              this.genDisplayBillingDetObject["igst_amt"] = "";
                              this.genDisplayBillingDetObject["sgst_rate"] = "";
                              this.genDisplayBillingDetObject["sgst_amt"] = "";
                              
                              this.genDisplayBillingDetArray.push(this.genDisplayBillingDetObject);
                          }
                          
                          let bill_cond = response.data.ex_bill_cond;
                          
                          for(let condIndex in bill_cond){
                              
                              for(let gIndex in this.genDisplayBillingDetArray){
                                 if( bill_cond[condIndex].kposn == this.genDisplayBillingDetArray[gIndex].itemNum){
                                     
                                     if(bill_cond[condIndex].kschl == 'ZPRO'){
                                         this.genDisplayBillingDetArray[gIndex]["price"]=bill_cond[condIndex].kwert;
                                     }
                                     
                                     if(bill_cond[condIndex].kschl == 'ZSPE'){
                                         this.genDisplayBillingDetArray[gIndex]["fix_sch"]=bill_cond[condIndex].kbetr;
                                     }
                                     
                                     if(bill_cond[condIndex].kschl == 'ZSVL'){
                                         this.genDisplayBillingDetArray[gIndex]["sch_val"]=bill_cond[condIndex].kwert;
                                     }
                                     
                                     if(bill_cond[condIndex].kschl == 'ZVAL'){
                                         this.genDisplayBillingDetArray[gIndex]["dis_amt"]=bill_cond[condIndex].kwert;
                                     }
                                     
                                     if(bill_cond[condIndex].kschl == 'ZPER'){
                                         this.genDisplayBillingDetArray[gIndex]["dis_val"]=bill_cond[condIndex].kbetr;
                                     }
                                     
                                     if(bill_cond[condIndex].kschl == 'JOCG'){
                                         this.genDisplayBillingDetArray[gIndex]["cgst_rate"]=bill_cond[condIndex].kbetr;
                                         this.genDisplayBillingDetArray[gIndex]["cgst_amt"]=bill_cond[condIndex].kwert;
                                     }
                                     
                                     if(bill_cond[condIndex].kschl == 'JOIG'){
                                         this.genDisplayBillingDetArray[gIndex]["igst_rate"]=bill_cond[condIndex].kbetr;
                                         this.genDisplayBillingDetArray[gIndex]["igst_amt"]=bill_cond[condIndex].kwert;
                                     }
                                      if(bill_cond[condIndex].kschl == 'JOSG' || bill_cond[condIndex].kschl == 'JOUG'){
                                         this.genDisplayBillingDetArray[gIndex]["sgst_rate"]=bill_cond[condIndex].kbetr;
                                         this.genDisplayBillingDetArray[gIndex]["sgst_amt"]=bill_cot;
                                     }
                                     
                                 }
                              }
                          
                          }
                          
                          
                      }*/
                  
                    if (response.data.hasOwnProperty("ex_address")) {
                        this.addressDetailsBilling ="";
                        this.responseAddress = response.data.ex_address[0];

                        if (!this.responseAddress.hasOwnProperty("sold_to_name")) {
                            
                            this.responseAddress["ship_to_name"] = '';
                            this.responseAddress["ship_to_house_num"] = '';
                            this.responseAddress["ship_to_city"] = '';
                            this.responseAddress["ship_to_street"] = '';
                            this.responseAddress["ship_post_code1"] = '';

                            this.responseAddress["sold_post_code1"] = '';
                            this.responseAddress["sold_to_city"] = '';
                            this.responseAddress["sold_to_street"] = '';
                            this.responseAddress["sold_to_house_num"] = '';
                            this.responseAddress["sold_to_name"] = '';



                        }


                    }

                } else {
                    this.commonService.responseMessages("", response.message, "warning");
                    this.outBoundDeliveryFormObject = [];
                    this.applyDataTable();
                }
                  $("#gs-GSTR1A").hide();
                    $("#gs-GSTR1").hide();
                     $("#gs-GSTR2").hide();
                  
                    $("#icon-GSTR1A").show();
                    
                    $("#icon-GSTR1").show();
                    $("#icon-GSTR2").show();
                   
                
                $('#loadingIcon').hide();
                $("#black-overlay").hide();
                console.log(this.outBoundDeliveryFormObject)
            }, err => {

                console.log(err);
                $('#loadingIcon').hide();
                $("#black-overlay").hide();

            });
    
    }
    
    navigateToBillingDetails(){
        const path:any="billing";
      this.router.navigate([path]);
    }
    
        closeModal(id){
            $("#" + id).modal("hide");
            this.createBillingForm.reset();
            if(id == "displayErrorsModal"){
                this.navigateToBillingDetails();
            }
        }
    
    applyDataTable(){
        
    $("#billing-details").DataTable({
                        "bSort" : false,
                         retrieve: true,
                       "language": {
                           "emptyTable": "No data available",
                           "info": "Showing page _PAGE_ of _PAGES_",
                           "infoFiltered": "(filtered from _MAX_ total records)"
                       },
                       "fnDrawCallback": function(oSettings) {
                           if (5 >= oSettings.fnRecordsDisplay()) {
                               $(oSettings.nTableWrapper).find('.dataTables_paginate').hide();

                               $(oSettings.nTableWrapper).find('.dataTables_info').hide();
                               $(oSettings.nTableWrapper).find('.dataTables_filter').hide();
                               $(oSettings.nTableWrapper).find('.dataTables_length').hide();


                           } else {
                               $(oSettings.nTableWrapper).find('.dataTables_paginate').show();

                           }
                       },
                   });
    }
    
   
    
     getHeaderList() {

        let url = this.environment.getRequiredApi('header_dropdown') + "?group=BHDRS&";

        this.commonService.getData(url, "GET", '', "")
            .subscribe((response) => {
                console.log(response);
                this.headerTextList = response.data.configValues;
                let headerList = this.headerTextList;
                for(let index in headerList){
                    this.headerListId[headerList[index].key]="";
                    
                }
                this.emptyFlag=false;
            });
    }
    
    
    
     addTextBox(key){
        
        for(let index in this.headerListId){
            let prevKeyVals = this.headerListId[index];
            if(index == key){
                
            }else{
                $("#header_"+index).hide();
            }    
        }
       
        $("#header_"+key).removeAttr("style");
        
        $("#header_"+key).val(this.headerListId[key]);
        
       
        console.log(this.headerListId);
      
        
        
    }
    onChange(event: any,key) {
        this.emptyFlag =true;
       this.headerListId[key] = event.target.value;
    };
    
    createBillingOrder(){
      this.commonService.saleType='Create';
      $(".modal-header").find("#header-text").text("Create Billing");
      $("#billingSalesModal").modal("show");
      
       $('#billingDate').datetimepicker({
          debug:false,
          widgetPositioning: {
             horizontal: 'left'
           },
       icons: {
         time: "fa fa-clock-o",
         date: "fa fa-calendar",
         up: "fa fa-arrow-up",
         down: "fa fa-arrow-down",
         previous: 'fa fa-arrow-left',
         next: 'fa fa-arrow-right'
       },
       format: 'DD-MM-YYYY',
       
     });
  }
  changePickerPos() {
      setTimeout(() => {
          $(".bootstrap-datetimepicker-widget").css("position", "fixed");
          $(".bootstrap-datetimepicker-widget").css("top", "102px");
          $(".bootstrap-datetimepicker-widget").css("left","200px")
          
      }, 100);

  } 
      createBillingSubmit(id){
      
      if(this.createBillingForm.value["docNumber"] == "" ||  this.createBillingForm.value["billingDate"] == ""){
          
      return false;
      }
     
      $("#"+id).modal("hide"); 
       const path:any="billing/createbilling";
      let  delv_no = this.createBillingForm.value["docNumber"];
     
      let billingDate = $("#billingDate").val();
      let splittedDateArray = billingDate.split("-");
      billingDate = splittedDateArray[2]+splittedDateArray[1]+splittedDateArray[0];
          
      this.router.navigate([path],{ queryParams: {"delvNo":delv_no,"billDate":billingDate,"action":"C"} });
      
  }
    removeStyles(id){
    $('#'+id).datetimepicker("hide"); 
      
        this.createBillingForm.controls['billingDate'].setValue($("#billingDate").val());
        //this.cancelBillingForm.controls['billingDate'].setValue($("#cancelBilling").val());
    }
    
    
    cancelBilling() {

         this.cancelBillingPayload = {};
         this.cancelBillingPayload["bp_id"] = this.bpId;
         this.cancelBillingPayload["org_id"] = this.orgId;
         this.cancelBillingPayload["object"] = "SB";


         this.billingObjectEdit = {};
         this.billingObjectEdit["bill_num"] = this.billingDocNum;
         this.billingObjectEdit["del_num"] = this.deliveryNumber;
         this.billingArrayEdit.push(this.billingObjectEdit);


         if (this.billingArrayEdit.length == 0) {
             this.commonService.responseMessages("", "Please Select Billings To Cancel", "warning");
             return false;
         } else {

             swal({
                 title: "Do you want to cancel the billing ?",
                 //type: "warning",
                 showCancelButton: true,
                 confirmButtonClass: "btn-default btn-primary-custom login-button-export",
                 cancelButtonClass: "btn-danger btn-danger-custom ",

                 confirmButtonText: "Ok",
                 closeOnConfirm: true
             },
                 () => {


                     $("#cancel-billing").modal("show");


                     for (let billIndex in this.billingArrayEdit) {

                         $('#cancelBilling' + this.billingArrayEdit[billIndex].bill_num).datetimepicker({
                             debug: false,
                             widgetPositioning: {
                                 horizontal: 'left'
                             },
                             icons: {
                                 time: "fa fa-clock-o",
                                 date: "fa fa-calendar",
                                 up: "fa fa-arrow-up",
                                 down: "fa fa-arrow-down",
                                 previous: 'fa fa-arrow-left',
                                 next: 'fa fa-arrow-right'
                             },
                             format: 'DD-MM-YYYY',
                             maxDate: new Date()
                         });
                     }


                 });



         }
     }
    confirmCancelBilling(id){
                             

        $(".bootstrap-datetimepicker-widget").css("position", "fixed");
        $(".bootstrap-datetimepicker-widget").css("top", "92px");
        $(".bootstrap-datetimepicker-widget").css("left", "150px");

        for (let billIndex in this.billingArrayEdit) {
            let date = $('#cancelBilling' + this.billingArrayEdit[billIndex].bill_num).val();
            if (date == "") {
                this.commonService.responseMessages("", "Please select Reversal Date", "warning");
                return false;
            }
        }
        this.closeModal(id);
        $('#loadingIcon').show();
        $("#black-overlay").show();

        this.cancelBillingPayload["object_details"] = [];

        for (let billIndex in this.billingArrayEdit) {
            let billObject = {};

            billObject["vbeln"] = this.billingArrayEdit[billIndex].bill_num;

            let delDate = $('#cancelBilling' + this.billingArrayEdit[billIndex].bill_num).val().split("-");
            if (delDate != "") {
                billObject["budat"] = delDate[2] + delDate[1] + delDate[0];
            } else {
                billObject["budat"] = "";
            }
            this.cancelBillingPayload["object_details"].push(billObject);
        }


        console.log(this.cancelBillingPayload)

        let url: any = this.environment.getRequiredApi("cancel_sales_order") + "?";
        this.commonService.getData(url, "POST", this.cancelBillingPayload, this.accessObjId).subscribe(response => {
            console.log(response)
            this.billingArrayEdit = [];
            this.errorLogs = [];
            let errorObject = {};
            if (response.status == 0) {
                let data = response.data.ex_return;
                if (response.data.hasOwnProperty("ex_return")) {
                    for (let index of data) {
                        errorObject = {};
                        if (index.type == "E") {
                            errorObject["number"] = index.number;
                            errorObject["message"] = index.message;
                            errorObject["message_v1"] = index.message_v1;
                            this.errorLogs.push(errorObject);
                        }
                    }



                }

                if (this.errorLogs.length == 0) {
                    this.commonService.responseMessages("", "Billing is cancelled", "warning");
                    
                } else {
                    this.cancelBillingFlag = true;
                    $("#displayErrorsModal").modal("show");
                }


            } else {
                this.commonService.responseMessages("", response.message, "warning");
            }
            $('#loadingIcon').hide();
            $("#black-overlay").hide();
        });

    } 
     changeFkdatVal(){
       this.backDatedForm.controls['fkDate'].setValue($("#docDatepicker").val());
       
    }
  
    
}
