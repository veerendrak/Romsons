import { Component, OnInit, ChangeDetectorRef } from '@angular/core';
import { Http , Headers, Response,RequestOptions } from '@angular/http';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { Router } from '@angular/router';
import { AppComponent } from '../../app.component';
import {CommonService} from '../../services/common.service';
import { MessagePropertiesService } from '../../services/message-properties.service'; 
import { EnvConfigurationService } from '../../services/env-configuration.service';

declare var $: any; 
declare var jQuery: any;
declare var swal: any;

@Component({
  selector: 'app-billing-details',
  templateUrl: './billing-details.component.html',
  styleUrls: ['./billing-details.component.css']
})
export class BillingDetailsComponent implements OnInit {
    createBillingForm:FormGroup;
    billingDetMsg:any;
    billingListData:any;
      url:string;
     bpId:string;
     orgId:string;
    billingDetailsPayload:any={};
    
  constructor(private http: Http, private formBuilder: FormBuilder,private environment:EnvConfigurationService,
          private router: Router,private ref: ChangeDetectorRef,private app:AppComponent, private messagesService:MessagePropertiesService,
          private commonService:CommonService) {
      this.app.isActive=true;
      this.createBillingForm = formBuilder.group({
          hideRequired: false,
          floatLabel: 'auto',
          'docNumber': ['', Validators.required],
          'billingDate':['', Validators.required],
        });
      this.billingDetMsg = messagesService.billing_det_msg;
       this.bpId = localStorage.getItem("bpId");
       this.orgId =localStorage.getItem("orgId");
  }

  ngOnInit() {
     
     
        $( '.datepicker-init' ).datetimepicker( {
                debug: true,
                widgetPositioning: {
                    horizontal: 'left'
                },
                icons: {
                    time: "fa fa-clock-o",
                    date: "fa fa-calendar",
                    up: "fa fa-arrow-up",
                    down: "fa fa-arrow-down",
                    previous: 'fa fa-arrow-left',
                    next: 'fa fa-arrow-right'
                },
                format: 'LL',
                
            } );
        setTimeout(()=>{
            var width=$("#mainContent").css("width");
            $(".outbound-footer").css("width",width);
        },50); 
      
      
      this.getBillingDetailsList();
      this.applyDataTable();
  }
     applyDataTable(){
       
       setTimeout(()=>{  
           $("#billingordertable").DataTable({
        
           "language": {
              "emptyTable": "No data available",
              "info": "Showing page _PAGE_ of _PAGES_",
              "infoFiltered": "(filtered from _MAX_ total records)"
            },
           "fnDrawCallback": function( oSettings ) {
                        if ( 5 >= oSettings.fnRecordsDisplay() ) {
                            $( oSettings.nTableWrapper ).find( '.dataTables_paginate' ).hide();
                            
                            $( oSettings.nTableWrapper ).find( '.dataTables_info' ).hide();
                            
                           
                        } else {
                            $( oSettings.nTableWrapper ).find( '.dataTables_paginate' ).show();
                            $(oSettings.nTableWrapper).find('.dataTables_filter').show();
                            $( oSettings.nTableWrapper ).find( '.dataTables_info' ).show();
                            $(oSettings.nTableWrapper).find('.dataTables_length').show();
                          
                        }
                    },
          
      });
         },400);  
          setTimeout(() =>{
          $(".dataTables_scrollHeadInner").css({"width":"100%"});
          $(".table ").css({"width":"100%"}); 
          $("#billing-order-table_filter").append("<i class='fa fa-search searchStock' id='searchStock'></i>");
          },1100);
        
        
        
    }
    getBillingDetailsList(){
        this.billingDetailsPayload["bp_id"]=this.bpId;
        this.billingDetailsPayload["org_id"]=this.orgId;
        
         $('#loadingIcon').show();
       $("#black-overlay").show();
         this.url = this.environment.getRequiredApi( 'get_billing_details' )+"?";
      
        this.commonService.getData( this.url, 'POST', this.billingDetailsPayload,localStorage.getItem("Billing"))
            .subscribe(( response ) => {
               if(response.status == '1'){
                   this.commonService.responseMessages("", response.message, "warning");
                this.billingListData=[];
                   $('#loadingIcon').hide();
                   $("#black-overlay").hide();
               }else{
                this.billingListData = response.data.ex_bill_list; 
                   $("#billingordertable").DataTable().destroy();
                    this.applyDataTable();
                   
                    
              $('#loadingIcon').hide();
              $("#black-overlay").hide(); 
               }
           
                   
              
              
            
            }, err => {
                  $('#loadingIcon').hide();
              $("#black-overlay").hide();
                    console.log(err)   
            
            } );
        
        //
    
    }
    
    
    
    
  editBillingOrder(){
      this.commonService.saleType='Edit';
       $(".modal-header").find("#header-text").text("Edit Billing");
      $("#billingSalesModal").modal("show");  
  }
  createBillingOrder(){
      this.commonService.saleType='Create';
      $(".modal-header").find("#header-text").text("Create Billing");
      $("#billingSalesModal").modal("show");
      
       $('#billingDate').datetimepicker({
          debug:false,
          widgetPositioning: {
             horizontal: 'left'
           },
       icons: {
         time: "fa fa-clock-o",
         date: "fa fa-calendar",
         up: "fa fa-arrow-up",
         down: "fa fa-arrow-down",
         previous: 'fa fa-arrow-left',
         next: 'fa fa-arrow-right'
       },
       format: 'DD-MM-YYYY'
     });
  }
  changePickerPos() {
      setTimeout(() => {
          $(".bootstrap-datetimepicker-widget").css("position", "fixed");
          $(".bootstrap-datetimepicker-widget").css("top", "102px");
          $(".bootstrap-datetimepicker-widget").css("left","200px")
          
      }, 100);
//      this.createBillingForm.controls.billingDate.invalid = false;
  } 
  closeModal(id){
      $("#"+id).modal("hide");
      this.createBillingForm.reset();
  }
  createBillingSubmit(id){
      $("#"+id).modal("hide"); 
       const path:any="billing/createbilling";
      let  delv_no = this.createBillingForm.value["docNumber"];
     
      let billingDate = $("#billingDate").val();
      this.router.navigate([path],{ queryParams: {"delvNo":delv_no,"billDate":billingDate,"action":"C"} });
      
  }
  editBillingOrderById(){
      this.commonService.saleType='Edit';
      const path:any="billing/createsalesorder";
      this.router.navigate([path]);
  }

    displayBillingDetails(selectedBillId){
        this.commonService.saleType='Display';
       const path:any="billing/editbillingdetails";
      this.router.navigate([path],{ queryParams: {"billId":selectedBillId,"action":"DIS"} });
               
    }
    
    removeStyles(id){
    $('#'+id).datetimepicker("hide");   
}
}
