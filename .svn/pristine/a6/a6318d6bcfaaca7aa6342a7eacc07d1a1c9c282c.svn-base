import { Component, OnInit, Input,Output, EventEmitter,ChangeDetectorRef} from '@angular/core';
import { Http , Headers, Response,RequestOptions } from '@angular/http';
import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';
import { Router,ActivatedRoute, Params} from '@angular/router';
import { AppComponent } from '../../app.component';
import {CommonService} from '../../services/common.service';
import { DateAdapter } from '@angular/material';
import { MessagePropertiesService } from '../../services/message-properties.service'; 
import {EnvConfigurationService} from '../../services/env-configuration.service';
declare var $: any; 
declare var jQuery: any;
declare var swal: any;
declare var XLSX:any;
declare var XLS:any;
@Component({
  selector: 'app-edit-outbound-delivery',
  templateUrl: './edit-outbound-delivery.component.html',
  styleUrls: ['./edit-outbound-delivery.component.css']
})
export class EditOutboundDeliveryComponent implements OnInit {
        
     deliveryForm: FormGroup;
    outboundDeliveryMsg:any;
    title:any;
    deliveryNum:any;
    outBoundDelPayload:any={};
    docDate:any;
    giDate:any;
    delDate:any;
    disableFlag:boolean;
    outBoundDeliveryFormObject:any=[];  
    bpId:any;
    orgId:any;
    numOfPackage:any;
    itemNumbers:any;
    outboundDelievryItemsList:any;
    accessObjectId:any;
    deliveryList:any;
    saveBtn:boolean=false;
    errorList:any;
    errorFlag:boolean=false;
    shAddress:any;
    shComplince:any;
    dsFlag:boolean=true;
    shName:any;
    shId:any;
    indeterminate:boolean=false;
    checked:boolean=false;
    headerList:any;
    plGiDate:any;
    acGiDate:any;
    totalWeight:any;
    weightType:any;
    numPack:any;
    fromItem:any;
    toItem:any;
    checkedObjects:any;
    createDeliveryForm:FormGroup;
  constructor(private http: Http, private formBuilder: FormBuilder,private messagesService:MessagePropertiesService,private environment:EnvConfigurationService,
          private router: Router,private ref: ChangeDetectorRef,private app:AppComponent,private commonService:CommonService,private activatedRoute:ActivatedRoute) { 
      this.app.isActive=true;
      this.deliveryForm = formBuilder.group({
        
          'shippingPoint': ['', Validators.required],
          'date': ['', Validators.required],
          'orderNum': ['', Validators.required],
          'DocDate': ['', Validators.required],
          'PGiDate': ['', Validators.required],
          'GiDate': [''],
          'NoPackage': [''],
          'totWeight': [''],
        });
      this.outboundDeliveryMsg = messagesService.outbound_delivery_msg;
      this.disableFlag=true;
       this.bpId=localStorage.getItem("bpId");
        this.orgId=localStorage.getItem("orgId");
        this.itemNumbers=[];
        this.outboundDelievryItemsList=[];
        this.accessObjectId=localStorage.getItem('Outbound Delivery');
        this.deliveryList={};
        this.saveBtn=false;
        this.errorList=[];
        this.errorFlag=false;
        this.shAddress={};
        this.shComplince={};
        this.dsFlag=true;
        this.shId="";
        this.shName="";
        this.fromItem=""
        this.toItem="";
        this.outboundDelievryItemsList=[];
        this.headerList=[];
        this.docDate="";
        this.plGiDate="";
        this.acGiDate="";
        this.numPack="";
        this.totalWeight="";
        this.weightType="";
        this.shName="";
        this.checkedObjects=[];
        this.createDeliveryForm = formBuilder.group({
            hideRequired: false,
            floatLabel: 'auto',
           'outboundDate': ['', Validators.required],
           'outboundOrder':['', Validators.required],
           'frmItem':[''],
           'toItem':['']
          });
  }

  ngOnInit() {
      this.activatedRoute.queryParams.subscribe(params => {
      if(this.router.url.includes("obd")){
        this.deliveryNum=  params['orderNum'];
        this.commonService.deliveryNum=this.deliveryNum;
        if(params['action']=="U"){
            this.disableFlag=false;
        }
        this.getSalesOutboundDeliveryList();
      
      }
  });
      
      setTimeout(()=>{
      
          if(this.deliveryForm.value["orderNum"].length == 0){
              $( '.datepicker-init' ).datetimepicker( {

                widgetPositioning: {
                    horizontal: 'left'
                },
                icons: {
                    time: "fa fa-clock-o",
                    date: "fa fa-calendar",
                    up: "fa fa-arrow-up",
                    down: "fa fa-arrow-down",
                    previous: 'fa fa-arrow-left',
                    next: 'fa fa-arrow-right'
                },
                format: 'LL',
                
            } );
          }
          
      },500);
  }

     getSalesOutboundDeliveryList(){
         $('#loadingIcon').show();
         $("#black-overlay").show();
          this.outBoundDelPayload["bp_id"]=this.bpId;
          this.outBoundDelPayload["org_id"]=this.orgId;
         this.outBoundDelPayload["del_num"]=this.deliveryNum;
         
         let url = this.environment.getRequiredApi( 'get_sales_delivery_display' )+"?delv_num="+this.deliveryNum+"&org_id="+this.orgId+"&bp_id="+this.bpId+"&";
      
        this.commonService.getData( url, 'GET', "",this.accessObjectId)
            .subscribe(( response ) => {
                if(response.status==0){
                    this.outboundDelievryItemsList=[];
                    this.itemNumbers=[];
                    this.deliveryList={};
                    this.deliveryList=response["data"];
                    this.deliveryList['ch_delivery_tables']={};
                    this.deliveryList['ch_delivery_tables'].likp=[];
                    this.deliveryList['ch_delivery_tables'].likp.push(response["data"].ex_header_details);
                    this.deliveryList['ch_delivery_tables'].lips=response["data"].ex_item_details;
                    if(this.deliveryList.hasOwnProperty(['ex_address'])){
                        this.shAddress=this.deliveryList['ex_address'];
                        this.shName=this.shAddress['cust_name']
                    }
                    if(this.deliveryList.hasOwnProperty(['ex_compliance'])){
                        this.shComplince=this.deliveryList['ex_compliance'];
                    }
                    this.deliveryList['ch_batch_mat_stock']=[];
                    if(response["data"].hasOwnProperty('ex_batch_mat_stock')){
                        this.deliveryList['ch_batch_mat_stock']=response["data"]['ex_batch_mat_stock'];
                    }
                    if(this.deliveryList.hasOwnProperty('ch_delivery_tables')){
                        if(this.deliveryList['ch_delivery_tables'].hasOwnProperty('likp')){
                            if(this.deliveryList['ch_delivery_tables'].likp.length>0){
                                this.headerList=this.deliveryList['ch_delivery_tables'].likp;
                                if(this.headerList[0].bldat!='0000-00-00'){
                                    this.docDate=this.headerList[0].bldat;
                                }
                                if(this.headerList[0].wadat!='0000-00-00'){
                                    this.plGiDate=this.headerList[0].wadat;
                                }
                                if(this.headerList[0].wadat_ist!='0000-00-00'){
                                    this.acGiDate=this.headerList[0].wadat_ist;
                                }
                                this.totalWeight=this.headerList[0].btgew;
                                this.weightType=this.headerList[0].gewei;
                                this.numPack=this.headerList[0].anzpk;
                            }
                        }
                        let itemList:any="";
                        if(this.deliveryList['ch_delivery_tables'].hasOwnProperty('lips')){
                            if(this.deliveryList['ch_delivery_tables'].lips.length>0){
                                this.deliveryList['ch_delivery_tables']["lips"].forEach(currentItem=>{
                                    currentItem.updateFlag="U";
                                    currentItem.displayRow=true;
                                    if(!currentItem.hasOwnProperty('charg')){
                                        currentItem.batchNum=""
                                        this.itemNumbers.push(currentItem);
                                    }
                                });
                                
                                for(let index of this.deliveryList['ch_delivery_tables']["lips"]){
                                    if(index.hasOwnProperty("charg")){
                                        this.deliveryList['ch_batch_mat_stock'].forEach(currentItem=>{
                                            if(currentItem.hasOwnProperty("charg")){
                                                if(index.charg==currentItem.charg && index.matnr==currentItem.matnr){
                                                    index.omeng=currentItem.clabs;
                                                }  
                                            }
                                        });
                                    }
                                }
                                for(let index of this.itemNumbers){
                                    this.outboundDelievryItemsList.push(index);
                                    this.deliveryList['ch_delivery_tables']["lips"].forEach(currentItem=>{
                                        if(index.posnr==currentItem.uecha){
                                            currentItem.batchNum=index.posnr;
                                            this.outboundDelievryItemsList.push(currentItem);
                                        }
                                    });
                                }
                                let count:any=0;
                                this.deliveryList['ch_open_quantity']=[];
                                if(response["data"].hasOwnProperty('ex_open_quantity')){
                                    this.deliveryList['ch_open_quantity']=response["data"].ex_open_quantity;
                                }
                                
                                if(this.deliveryList.hasOwnProperty('ch_open_quantity')){
                                    if(this.deliveryList['ch_open_quantity'].length>0){
                                        for(let item of this.itemNumbers){
                                            this.deliveryList['ch_open_quantity'].forEach(currentItem=>{
                                                if(currentItem.posnr==item.vgpos
                                                        && currentItem.vbeln==item.vgbel){
                                                    item['omeng']=currentItem.omeng;
                                                }
                                                count++;
                                            });
                                        }
                                    }
                                }
                              //this.outboundDelievryItemsList=this.deliveryList['ch_delivery_tables']["lips"];
                              let vgPos:any=null;
                              let delvQty:any=null;
                              let batchLength:any=0;
                              let countItm:any=0;
                              for(let index of this.itemNumbers){
                                  this.outboundDelievryItemsList.forEach(currentItem=>{
                                          if(index.vgbel==currentItem.vgbel && currentItem.batchNum!="" && index.posnr==currentItem.batchNum){
                                              if(delvQty==null){
                                                  delvQty=parseFloat(currentItem.lfimg);
                                              }else{
                                                  delvQty=delvQty+parseFloat(currentItem.lfimg);
                                              }
                                              this.outboundDelievryItemsList[countItm].lfimg=delvQty;
                                              this.outboundDelievryItemsList[countItm].omeng=index.omeng;
                                              batchLength++;
                                          }
                                  });
                                  countItm++;
                                  countItm=countItm+batchLength;
                                  batchLength=0;
                                  delvQty=null;
                              }
                              
                            }
                        }
                        
                       
                    }
                    $('#loadingIcon').hide();
                    $("#black-overlay").hide();
                }else{
                    this.commonService.responseMessages("", response.message, "warning");
                    $('#loadingIcon').hide();
                    $("#black-overlay").hide();
                }
                setTimeout(()=>{
                    var width=$("#mainContent").css("width");
                    $(".outbound-footer").css("width",width);
                    $(".outbound-footer").show();
                },50);
            }, err => {
                  
                    console.log(err)   
                
               
                //this.reqdata.responseMessages(err, err.status, 'danger');
            } );
        
    
    }
    
     selectAll(event,checkAll,tableId){
         setTimeout(()=>{
            if($("#"+checkAll).is(":checked")){
                 this.commonService.selectAllCheckBoxes(checkAll,tableId);
                 let count:any=0;
                 this.outboundDelievryItemsList.forEach(response=>{
                     if(response.displayRow){
                         this.checkedObjects.push(count);
                     }
                     count++;
                 });
             }else{
                 this.commonService.selectAllCheckBoxes(checkAll,tableId);
                 this.checkedObjects=[];
             }
             
             
         },300);
         
     }
     getReportList(event,tableId,i,response){
         setTimeout(()=>{let flag:boolean=this.commonService.checkAction(tableId);
         if(flag){
             this.indeterminate=false;
             this.checked=true;
         }else{
             this.indeterminate=true;
         }
         },400);
        setTimeout(()=>{
            if($("#checkbox-"+i+"-input").is(":checked")){
                this.checkedObjects.push(i);
                if(response.batchNum==""){
                    this.outboundDelievryItemsList.forEach(currentItem=>{
                       if(currentItem.batchNum!="" && currentItem.vgpos==response.vgpos){
                           i++;
                           this.checkedObjects.push(i);
                       } 
                    });
                }
            }else{
                if(this.checkedObjects.length>0){
                    let count:any=0;
                for(let index of this.checkedObjects){
                    if(index==i){
                        delete this.checkedObjects[count];
                    }
                    count++;
                }
                }
                setTimeout(()=>{let flag:boolean=this.commonService.continueAction(tableId);
                if(flag){
                    this.indeterminate=false;
                    this.checked=false;
                }else{
                    this.indeterminate=true;
                }
                },200);
            }
            
        },300); 
     }
     expandChildRows(childrow,itemId,icon,index,orderId){
         if($("#plus-"+index).is(":visible")){
             $("#plus-"+index).hide();
             $("#minus-"+index).show();
             $("."+childrow+"-"+itemId+"-"+orderId).show(); 
             
         }else{
             if($("#minus-"+index).is(":visible")){
                 $("#plus-"+index).show();
                 $("#minus-"+index).hide();
             }
             $("."+childrow+"-"+itemId+"-"+orderId).hide();          
         }
         
     }
     expandAllrows(){
         if($(".child-row").is(":visible")){
             $(".child-row").hide();
             $(".plus-circle-icon").show();
             $(".minus-circle-icon").hide();
         }else{
             $(".child-row").show();
             $(".plus-circle-icon").hide();
             $(".minus-circle-icon").show(); 
         }
     }
     displayAddSalesModal(){
         $("#salesForm")[0].reset();
         $("#outboundDeliveryModal").modal("show");
     }
     closeModal(id){
         $("#"+id).modal("hide");
         $("#salesForm")[0].reset();
         this.createDeliveryForm.reset();
     }
     getSimulationDetails(reqSimPayload){
         $('#loadingIcon').show();
         $("#black-overlay").show();
         let url:any=this.environment.getRequiredApi("get_simulation_dlvr_details")+"?";
         this.commonService.getData(url, "POST", reqSimPayload, this.accessObjectId).subscribe(response=>{
            if(response.status==0){
                if(response["data"]['e_created_deliveries']==0){
                    if(response["data"].hasOwnProperty('ex_return')){
                        if(response["data"]['ex_return'].length>0){
                            this.errorList=response["data"]['ex_return'];
                            for(let elist of response["data"]['ex_return']){
                                if(elist.type=='E'){
                                    this.errorFlag=true;
                                    $('#loadingIcon').hide();
                                    $("#black-overlay").hide();
                                    $("#displayDlvrErrorsModal").modal("show");
                                    return false;
                                }
                            }
                        }
                    }else{
                        this.commonService.responseMessages("", "Invalid sales order to simulate", "warning");
                    }
                    
                    $('#loadingIcon').hide();
                    $("#black-overlay").hide();
                    return false;
                }
                this.outboundDelievryItemsList=[];
                this.itemNumbers=[];
                this.deliveryList={};
                this.deliveryList=response["data"];
                if(this.deliveryList.hasOwnProperty(['ex_address'])){
                    this.shAddress=this.deliveryList['ex_address'];
                    this.shName=this.shAddress['cust_name']
                }
                if(this.deliveryList.hasOwnProperty(['ex_compliance'])){
                    this.shComplince=this.deliveryList['ex_compliance'];
                }
                if(this.deliveryList.hasOwnProperty('ch_delivery_tables')){
                    if(this.deliveryList['ch_delivery_tables'].hasOwnProperty('likp')){
                        if(this.deliveryList['ch_delivery_tables'].likp.length>0){
                            this.headerList=this.deliveryList['ch_delivery_tables'].likp;
                            if(this.headerList[0].bldat!='0000-00-00'){
                                this.docDate=this.headerList[0].bldat;
                            }
                            if(this.headerList[0].wadat!='0000-00-00'){
                                this.plGiDate=this.headerList[0].wadat;
                            }
                            if(this.headerList[0].wadat_ist!='0000-00-00'){
                                this.acGiDate=this.headerList[0].wadat_ist;
                            }
                            this.totalWeight=this.headerList[0].btgew;
                            this.weightType=this.headerList[0].gewei;
                            this.numPack=this.headerList[0].anzpk;
                        }
                    }
                    let itemList:any="";
                    if(this.deliveryList['ch_delivery_tables'].hasOwnProperty('lips')){
                        if(this.deliveryList['ch_delivery_tables'].lips.length>0){
                            this.deliveryList['ch_delivery_tables']["lips"].forEach(currentItem=>{
                                currentItem.updateFlag="U";
                                currentItem.displayRow=true;
                                if(!currentItem.hasOwnProperty('charg')){
                                    currentItem.batchNum=""
                                    this.itemNumbers.push(currentItem);
                                }
                            });
                            for(let index of this.deliveryList['ch_delivery_tables']["lips"]){
                                if(index.hasOwnProperty("charg")){
                                    this.deliveryList['ch_batch_mat_stock'].forEach(currentItem=>{
                                        if(currentItem.hasOwnProperty("charg")){
                                            if(index.charg==currentItem.charg && index.matnr==currentItem.matnr){
                                                index.clabs=currentItem.clabs;
                                            }  
                                        }
                                    });
                                }
                            }
                            for(let index of this.itemNumbers){
                                this.outboundDelievryItemsList.push(index);
                                this.deliveryList['ch_delivery_tables']["lips"].forEach(currentItem=>{
                                    if(index.posnr==currentItem.uecha){
                                        currentItem.batchNum=index.posnr;
                                        this.outboundDelievryItemsList.push(currentItem);
                                    }
                                });
                            }
                            let count:any=0;
                            if(this.deliveryList.hasOwnProperty('ch_open_quantity')){
                                for(let item of this.itemNumbers){
                                    this.deliveryList['ch_open_quantity'].forEach(currentItem=>{
                                        if(currentItem.posnr==item.vgpos
                                                && currentItem.vbeln==item.vgbel){
                                            item['omeng']=currentItem.omeng;
                                        }
                                        count++;
                                    }); 
                                }
                                       
                            }
                          //this.outboundDelievryItemsList=this.deliveryList['ch_delivery_tables']["lips"];
                          let vgPos:any=null;
                          let delvQty:any=null;
                          let batchLength:any=0;
                          let countItm:any=0;
                          for(let index of this.itemNumbers){
                              this.outboundDelievryItemsList.forEach(currentItem=>{
                                      if(index.vgbel==currentItem.vgbel && currentItem.batchNum!="" && index.posnr==currentItem.batchNum){
                                          if(delvQty==null){
                                              delvQty=parseFloat(currentItem.lfimg);
                                          }else{
                                              delvQty=delvQty+parseFloat(currentItem.lfimg);
                                          }
                                          this.outboundDelievryItemsList[countItm].lfimg=delvQty;
                                          this.outboundDelievryItemsList[countItm].omeng=index.omeng;
                                          batchLength++;
                                      }
                              });
                              countItm++;
                              countItm=countItm+batchLength;
                              batchLength=0;
                              delvQty=null;
                          }
                          
                        }
                    }
                    
                   
                }
                $('#loadingIcon').hide();
                $("#black-overlay").hide();
            }else{
                this.commonService.responseMessages("", response.message, "warning");
                $('#loadingIcon').hide();
                $("#black-overlay").hide();
            } 
         });
}
     addSalesOrder(id){
         let docDate:any=$("#sFiterfromDate").val();
         docDate=docDate.split("/");
         docDate=docDate[2]+""+docDate[1]+""+docDate[0];
         let reqSimPayload:any={};
         reqSimPayload['bp_id']=this.bpId;
         reqSimPayload['org_id']=this.orgId;
         reqSimPayload['im_action']="SD";
         reqSimPayload['im_salesorder']=$("#orderNum").val();
         reqSimPayload['im_selection_date']=docDate;
         reqSimPayload['im_from_item']=$("#fromItem").val();
         reqSimPayload['im_to_item']=$("#toItem").val();
         reqSimPayload['ch_delivery_tables']={};
         reqSimPayload['im_delivery_tables_inx']=[];
         reqSimPayload['ch_open_quantity']=[];
         if(Object.keys(this.deliveryList).length>0){
             let docdate:any=$("#docDate").val();
             docdate=docdate.split("-");
             docdate=docdate[2]+""+docdate[1]+""+docdate[0];
             let planedGidate:any=$("#plndGiDate").val();
             planedGidate=planedGidate.split("-");
             planedGidate=planedGidate[2]+""+planedGidate[1]+""+planedGidate[0];
             let Gidate:any=$("#giDate").val();
             Gidate=Gidate.split("-");
             Gidate=Gidate[2]+""+Gidate[1]+""+Gidate[0];
             let numPackages=$("#numPackVal").val();
             this.deliveryList['ch_delivery_tables']['likp'][0].bldat=docdate;
             this.deliveryList['ch_delivery_tables']['likp'][0].wadat=planedGidate;
             this.deliveryList['ch_delivery_tables']['likp'][0].anzpk=numPackages;
             reqSimPayload['ch_delivery_tables']['likp']=this.deliveryList['ch_delivery_tables'].likp;
             reqSimPayload['ch_open_quantity']=this.deliveryList['ch_open_quantity'];
             reqSimPayload['ch_delivery_tables']['lips']=[];
             reqSimPayload['ch_batch_mat_stock']=this.deliveryList['ch_batch_mat_stock'];
             let dlvrQty:any=0; 
             for(let item of this.outboundDelievryItemsList){
                 let dlxItem:any={};
                 if(item.batchNum==""){
                     dlvrQty=item.lfimg
                 }
                 if(item.batchNum!=""){
                     dlxItem['item_num']=item.posnr;
                     dlxItem['qty']=item.lfimg;
                     dlxItem['ref_item_num']=item.vgpos;
                     dlxItem['main_item_num']=item.batchNum;
                     dlxItem['upd_flag']=item.updateFlag;
                     dlxItem['so_num']=item.vgbel;
                     reqSimPayload['im_delivery_tables_inx'].push(dlxItem);
                 }
                 if(item.displayRow){
                     reqSimPayload['ch_delivery_tables']['lips'].push(item);
                 }
             }
         }
         
         $("#"+id).modal("hide"); 
         this.getSimulationDetails(reqSimPayload);
     }
     changeQtyValidation(item,id){
         this.changeDeleiveryQty();
     }
     changeDeleiveryQty(){
         let vgPos:any=null;
     let delvQty:any=null;
     let batchLength:any=0;
     let countItm:any=0;
     for(let index of this.itemNumbers){
         this.outboundDelievryItemsList.forEach(currentItem=>{
                 if(index.vgbel==currentItem.vgbel && currentItem.batchNum!="" && index.posnr==currentItem.batchNum){
                     if(delvQty==null){
                         delvQty=parseFloat(currentItem.lfimg);
                     }else{
                         delvQty=delvQty+parseFloat(currentItem.lfimg);
                     }
                     if(countItm < this.outboundDelievryItemsList.length){
                         if(countItm==this.outboundDelievryItemsList.length-1){
                             countItm=countItm-1;
                         }
                         this.outboundDelievryItemsList[countItm].lfimg=delvQty;
                         this.outboundDelievryItemsList[countItm].omeng=index.omeng;
                             batchLength++;
                         
                     }
                 }
         });
         countItm++;
         countItm=countItm+batchLength;
         delvQty=null;
     }
     }
     createDelivery(){
         $('#loadingIcon').show();
         $("#black-overlay").show();
         let requestPayload:any={};
         requestPayload['bp_id']=this.bpId;
         requestPayload['im_action']="UD";
         requestPayload['org_id']=this.orgId;
         requestPayload['ch_delivery_tables']={};
         let docdate:any=$("#docDate").val();
         docdate=docdate.split("-");
         docdate=docdate[2]+""+docdate[1]+""+docdate[0];
         let planedGidate:any=$("#plndGiDate").val();
         planedGidate=planedGidate.split("-");
         planedGidate=planedGidate[2]+""+planedGidate[1]+""+planedGidate[0];
         let Gidate:any=$("#giDate").val();
         Gidate=Gidate.split("-");
         Gidate=Gidate[2]+""+Gidate[1]+""+Gidate[0];
         let numPackages=$("#numPackVal").val();
         this.deliveryList['ch_delivery_tables']['likp'][0].bldat=docdate;
         this.deliveryList['ch_delivery_tables']['likp'][0].wadat=planedGidate;
         this.deliveryList['ch_delivery_tables']['likp'][0].wadat_ist=Gidate;
         this.deliveryList['ch_delivery_tables']['likp'][0].anzpk=numPackages;
         requestPayload['ch_delivery_tables']['likp']=this.deliveryList['ch_delivery_tables'].likp;
         requestPayload['ch_delivery_tables']['lips']=[];
         requestPayload['im_delivery_tables_inx']=[];
         requestPayload['im_dlvreftosalesorder']=[];
         let dlvrQty:any=0; 
         for(let item of this.outboundDelievryItemsList){
             let dlxItem:any={};
             if(item.batchNum==""){
                 dlvrQty=item.lfimg
             }
             if(item.batchNum!=""){
                 dlxItem['item_num']=item.posnr;
                 dlxItem['qty']=item.lfimg;
                 dlxItem['ref_item_num']=item.vgpos;
                 dlxItem['upd_flag']=item.updateFlag;
                 dlxItem['so_num']=item.vgbel;
                 dlxItem['main_item_num']=item.batchNum;
                 requestPayload['im_delivery_tables_inx'].push(dlxItem);
                 let refDlvrytoSales:any={};
                 refDlvrytoSales['sales_unit']=item.meins;
                 refDlvrytoSales['ref_doc']=item.vgbel;
                 refDlvrytoSales['ref_item']=item.vgpos;
                 refDlvrytoSales['dlv_qty']=dlvrQty;
                 requestPayload['im_dlvreftosalesorder'].push(refDlvrytoSales);
             }
             if(item.displayRow){
                 requestPayload['ch_delivery_tables']['lips'].push(item);
             }
         }
         let url:any=this.environment.getRequiredApi("get_simulation_dlvr_details")+"?";
         this.commonService.getData(url, "POST", requestPayload, this.accessObjectId).subscribe(response=>{
            if(response.status==0){
                if(response["data"]['ex_return'].length>0){
                    this.errorList=response["data"]['ex_return'];
                    for(let elist of response["data"]['ex_return']){
                        if(elist.type=='E'){
                            this.errorFlag=true;
                            $('#loadingIcon').hide();
                            $("#black-overlay").hide();
                            $("#displayDlvrErrorsModal").modal("show");
                            return false;
                        }
                    }
                }
                this.deliveryNum=response["data"]["ex_delivery"];
                this.commonService.deliveryNum=this.deliveryNum;
                $('#loadingIcon').hide();
                $("#black-overlay").hide();
                this.commonService.responseMessages("", "Delievery "+this.deliveryNum+" created successfully", "success");
                if(this.deliveryNum!=""){
                    const path:any="obd/editdeliverydetails";
                this.router.navigate([path],{ queryParams: {"orderNum":this.deliveryNum,"action":"DIS"} });
                }
            } 
         });
         
     }
     redirectDelievryList(){
         const path:any='obd';
         this.router.navigate([path]);
     }
     removeLineSelectedItems(){
         if(this.checkedObjects.length>0){
             for(let index of this.checkedObjects){
                 if(index!=undefined && index!=null){
                     this.outboundDelievryItemsList[index].displayRow=false;
                     this.outboundDelievryItemsList[index].updateFlag="D";
                 }
             }
             this.checkedObjects=[];
         }else{
             this.commonService.responseMessages("", "Please select atleast one item", "warning");
         }
         setTimeout(()=>{let flag:boolean=this.commonService.continueAction("outbound-delivery-table");
         if(flag){
             this.indeterminate=false;
             this.checked=false;
         }else{
             this.indeterminate=true;
         }
         if($("#outbound-delivery-table").find('tbody').find('tr').length==0){
             this.indeterminate=false;
             this.checked=false;
         }
         
         },200);
       }
     changePickerPos(){
         setTimeout(()=>{
             $(".bootstrap-datetimepicker-widget").css("position","fixed");
             $(".bootstrap-datetimepicker-widget").css("top","102px");
         },100);
     } 
     removeStyles(id){
         $('#'+id).datetimepicker("hide");   
         this.createDeliveryForm.controls['outboundDate'].setValue($("#sFiterfromDate").val());
     }
}
